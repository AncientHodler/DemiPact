(print "")
(begin-tx "TX-00 [C0] - Chain Data Time SetUp Definition")
(namespace "free")
(env-chain-data
    {"prev-block-hash": "98c486052a5147fdd30fa43cc6d67e0a4e680c856c37f9157cb788cd67d58006",
     "block-time": TV.TIME00}
)
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-gas)
(commit-tx)
(print "")
;;
;;
;;================================================================================
;;                                                                              ;;
;;                      [3 TXs]                                                 ;;
;;              4.0     Executes Functions needed to activate the Sovereign     ;;
;;              4.1     DALOS                                                   ;;
;;                                                                              ;;
;;================================================================================
;;
;;
;;These Functions must be executed after Deployment to ensure Sovereing Functionality
;;Wrapped in a <(let ...>  syntax, they bring the removal of the deployer Modules
;;
;;              4.1     DALOS
(print "")
(begin-tx "TX-02 [4.1.2] - Dalos INIT [02]: Define IMC Policies")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)

(env-sigs
    [
        { "key": "PK_AncientHodler", "caps": [] }
        ;{ "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-P|IGNIS:module{OuronetPolicy} IGNIS)
        (ref-P|DPOF:module{OuronetPolicy} DPOF)
        (ref-P|ELITE:module{OuronetPolicy} ELITE)
        (ref-P|DPTF:module{OuronetPolicy} DPTF)
        ;;
        (mg1:guard (create-capability-guard (ATS.P|ATS|CALLER)))
        (mg2:guard (create-capability-guard (TFT.P|TFT|CALLER)))
        (mg3:guard (create-capability-guard (ATSU.P|ATSU|CALLER)))
        (mg4:guard (create-capability-guard (VST.P|VST|CALLER)))
        ;(mg5:guard (create-capability-guard (LIQUID.P|LQD|CALLER)))
        ;(mg6:guard (create-capability-guard (OUROBOROS.P|ORBR|CALLER)))
        ;(mg7:guard (create-capability-guard (SWPT.P|SWPT|CALLER)))
        ;(mg8:guard (create-capability-guard (SWP.P|SWP|CALLER)))
        ;(mg9:guard (create-capability-guard (SWPI.P|SWPI|CALLER)))
        ;(mg10:guard (create-capability-guard (SWPL.P|SWPL|CALLER)))
        (mg11:guard (create-capability-guard (SWPLC.P|SWPLC|CALLER)))
        ;(mg12:guard (create-capability-guard (SWPU.P|SWPU|CALLER)))
        (mg13:guard (create-capability-guard (MTX-SWP.P|MTX-SWP|CALLER)))
        (mg14:guard (create-capability-guard (TS01-A.P|TS)))
        (mg15:guard (create-capability-guard (TS01-C1.P|TALOS-SUMMONER)))
        (mg16:guard (create-capability-guard (TS01-C2.P|TALOS-SUMMONER)))
    )
    [
        ;;Backward IMC
        (ref-P|IGNIS::P|A_Define)
        (ref-P|DPOF::P|A_Define)
        (ref-P|ELITE::P|A_Define)

        ;;Forward IMC
        (ref-P|IGNIS::P|A_AddIMP mg14)
        (ref-P|IGNIS::P|A_AddIMP mg15)
        (ref-P|IGNIS::P|A_AddIMP mg16)

        (ref-P|DPOF::P|A_AddIMP mg1)
        (ref-P|DPOF::P|A_AddIMP mg2)
        (ref-P|DPOF::P|A_AddIMP mg3)
        (ref-P|DPOF::P|A_AddIMP mg4)
        (ref-P|DPOF::P|A_AddIMP mg11)
        (ref-P|DPOF::P|A_AddIMP mg13)
        (ref-P|DPOF::P|A_AddIMP mg14)
        (ref-P|DPOF::P|A_AddIMP mg15)
        (ref-P|DPOF::P|A_AddIMP mg16)

        (ref-P|ELITE::P|A_AddIMP mg15)
    
    ]
)

(format "<<<<<<<Dalos INIT [02] Costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(commit-tx)
(print "")
;;||>>>>>>>>>>>>>>>>>>>>>>>>>
;;|| NEXT                   >
;;||>>>>>>>>>>>>>>>>>>>>>>>>>
(print "")
(begin-tx "TX-02 [4.1.2] - Dalos INIT [02]: Define IMC Policies")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)

(env-sigs
    [
        { "key": "PK_AncientHodler", "caps": [] }
        ;{ "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-DPTF:module{DemiourgosPactTrueFungibleV6} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-ATS:module{AutostakeV5} ATS)
    )
    [
        ;(ref-DPMF::UR_P-KEYS)
        ;(ref-DPMF::UR_KEYS)
        (ref-ATS::UR_P-KEYS)
    ]
)

(format "<<<<<<<Dalos INIT [02] Costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(commit-tx)
(print "")
;;||>>>>>>>>>>>>>>>>>>>>>>>>>
;;|| NEXT                   >
;;||>>>>>>>>>>>>>>>>>>>>>>>>>
(print "")
(begin-tx "TX-02 [4.1.2] - Dalos INIT [02]: Define IMC Policies")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)

(env-sigs
    [
        { "key": "PK_AncientHodler", "caps": [] }
        ;{ "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-ELITE:module{Elite} ELITE)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV6} DPTF)
        (ref-ATS:module{AutostakeV5} ATS)
        ;;
        (vo:string "V|OURO-98c486052a51")
        (va:string "V|AURYN-98c486052a51")
        (vea:string "V|ELITEAURYN-98c486052a51")
        (zv:string "Z|VST-98c486052a51")
        ;;
        (k1:string "Σ.şZïζhЛßdяźπПЧDΞZülΦпφßΣитœŸ4ó¥ĘкÌЦ₱₱AÚюłćβρèЬÍŠęgĎwтäъνFf9źdûъtJCλúp₿ÌнË₿₱éåÔŽvCOŠŃpÚKюρЙΣΩìsΞτWpÙŠŹЩпÅθÝØpтŮыØșþшу6GтÃêŮĞбžŠΠŞWĆLτЙđнòZЫÏJÿыжU6ŽкЫVσ€ьqθtÙѺSô€χ")
    )
    [
        ;;1]Migrate DPMF to DPOF
        (ref-ELITE::A_MigrateMetaToOrtoFungibleId vo)
        (ref-ELITE::A_MigrateMetaToOrtoFungibleId va)
        (ref-ELITE::A_MigrateMetaToOrtoFungibleId vea)
        (ref-ELITE::A_MigrateMetaToOrtoFungibleId zv)
        ;;(acquire-module-admin free.DPOF)
        ;;(read DPOF.DPOF|T|Properties "V|AURYN-98c486052a51")
        ;;

        ;;2]Migrate DPMF Accounts to DPTF Accounts
        (ref-ELITE::A_MigrateMetaToOrtoFungibleAccount vo k1)
        (ref-ELITE::A_MigrateMetaToOrtoFungibleAccount va k1)
        (ref-ELITE::A_MigrateMetaToOrtoFungibleAccount vea k1)
        (ref-ELITE::A_MigrateMetaToOrtoFungibleAccount zv k1)
        ;;
        ;;
        ;;3]Upgrade DPTF to V2
        (ref-DPTF::URU_UpgradeTruefungibleToV2
            [
                "OURO-98c486052a51"
                "AURYN-98c486052a51"
                "DLK-98c486052a51"
                "DWK-98c486052a51"
                "ELITEAURYN-98c486052a51"
                "F|VST-98c486052a51"
                "GAS-98c486052a51"
                "R|OURO-98c486052a51"
                "VST-98c486052a51"
            ]
        )
        ;;3]Migrate ATS-Pairs to V2
        (ref-ATS::URU_UpgradeAtspairToV2
            [
                "Auryndex-98c486052a51"
                "EliteAuryndex-98c486052a51"
                "KdaLiquindex-98c486052a51"
            ]
        )

    
    ]
)

(format "<<<<<<<Migrate DPMF [01] Costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(commit-tx)
(print "")
;;||>>>>>>>>>>>>>>>>>>>>>>>>>
;;|| NEXT                   >
;;||>>>>>>>>>>>>>>>>>>>>>>>>>
(print "")
(begin-tx "TX-02 [4.1.2] - Dalos INIT [02]: Define IMC Policies")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)

(env-sigs
    [
        { "key": "PK_AncientHodler", "caps": [] }
        ;{ "key": "PK_Emma", "caps": [] }
    ]
)
(let
    (
        (ref-DALOS:module{OuronetDalosV5} DALOS)
        (split-kda:[decimal]
            (ref-DALOS::URC_SplitKDAPrices
                KST.ANHD
                (fold (+) 0.0 
                    [
                        (ref-DALOS::UR_UsagePrice "dptf")
                        (ref-DALOS::UR_UsagePrice "dpmf")
                        (ref-DALOS::UR_UsagePrice "ats")
                    ]
                )
            )
        )
        (kadena-wrap-amount:decimal 100000.0)
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            ;{ "key": "PK_Emma", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263", 
              "caps": 
                [
                    ;;for C_WrapKadena
                    (coin.TRANSFER 
                    "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                    "c:fQ9KNZrn8rBUW7wWYoQ2SENoBiqDTCuH9mOd_6Ggdz4"
                    kadena-wrap-amount)
                    ;;
                    ;;
                    ;;
                    ;;Satisfying Enviroment in C_Acquire
                    ;;<amount-one> to <receiver-one>
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                    ;;<amount-two> to <receiver-two>
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    ;;<amount-three> to <receiver-three>
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    ;;<amount-four> to <receiver-four>
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                ]
            }
        ]
    )
    (let
        (
            
            ;;
            (patron:string "Ѻ.éXødVțrřĄθ7ΛдUŒjeßćιiXTПЗÚĞqŸœÈэαLżØôćmч₱ęãΛě$êůáØCЗшõyĂźςÜãθΘзШË¥şEÈnxΞЗÚÏÛjDVЪжγÏŽнăъçùαìrпцДЖöŃȘâÿřh£1vĎO£κнβдłпČлÿáZiĐą8ÊHÂßĎЩmEBцÄĎвЙßÌ5Ï7ĘŘùrÑckeñëδšПχÌàî")
            ;;
            (ref-coin:module{fungible-v2} coin)
            (ref-DPTF:module{DemiourgosPactTrueFungibleV6} DPTF)
            (ref-TS01-C1:module{TalosStageOne_ClientOneV5} TS01-C1)
            (ref-TS01-C2:module{TalosStageOne_ClientTwoV5} TS01-C2)
            (ref-ATS:module{AutostakeV5} ATS)
            ;;
            (patron:string KST.ANHD)
            (patron-kda:string (ref-DALOS::UR_AccountKadena patron))
            (patron-kda-balance:decimal (ref-coin::get-balance patron-kda))
            (wkda-id:string (ref-DALOS::UR_WrappedKadenaID))
            (lkda-id:string (ref-DALOS::UR_LiquidKadenaID))
            (patron-wkda-balance:decimal (ref-DPTF::UR_AccountSupply wkda-id patron))
            ;;
            (ids:list
                (ref-TS01-C1::DPTF|C_Issue
                    patron
                    patron
                    ["PensionKadena"]
                    ["PKDA"]
                    [24]
                    [true]  ;;can change owner
                    [true]  ;;can upgrade
                    [true]  ;;can can-add-special-role
                    [false] ;;can-freeze
                    [false] ;;can-wipe
                    [false] ;;can pause
                )
            )
            (PensionID:string (at 0 ids))
            (HibernatedPensionID:string 
                (at 1 (ref-TS01-C2::VST|C_CreateHibernatingLink patron PensionID))
            )
            (KoriID:string
                (at 0
                    (ref-TS01-C2::ATS|C_Issue
                        patron
                        patron
                        ["KORIndex" ]
                        [24]
                        [lkda-id]
                        [false]
                        [PensionID ]
                        [false]
                    )
                )
            )
        )
        (acquire-module-admin free.DPTF)
        [
            [
                (format "Cumulated Resident on Kori is {}" [(ref-ATS::UR_SingleRewardTokenRUR KoriID lkda-id 1)])
                (format "Cumulated Unbonding on Kori is {}" [(ref-ATS::UR_SingleRewardTokenRUR KoriID lkda-id 2)])
                (format "Cumulated Royalty on Kori is {}" [(ref-ATS::UR_SingleRewardTokenRUR KoriID lkda-id 3)])
            ]
            [
                (ref-TS01-C2::LQD|C_WrapKadena patron patron kadena-wrap-amount)
                (ref-TS01-C2::ATS|C_Coil patron patron "KdaLiquindex-98c486052a51" wkda-id 98000.0)
                ;(format "Account AH existence for WKDA is {}" [(ref-DPTF::UR_IzAccount wkda-id patron)])
                ;(format "Read is {}" [(read DPTF.DPTF|BalanceTable (ref-DPTF::UC_IdAccount wkda-id patron))])
            ]
            [
                (format "AH has Native Kadena {}" [(ref-coin::get-balance patron-kda)])
                (format "AH has WKDA {}" [(ref-DPTF::UR_AccountSupply wkda-id patron)])
                (format "AH has LKDA {}" [(ref-DPTF::UR_AccountSupply lkda-id patron)])
                (ref-TS01-C1::DPTF|C_Transfer patron lkda-id patron KST.EMMA 2000.0 false)
            ]
            [
                PensionID HibernatedPensionID KoriID
            ]
            [
                (ref-TS01-C2::ATS|C_SwitchDirectRecovery patron KoriID true)
                (ref-TS01-C2::ATS|C_Control patron KoriID true false true)
                (ref-TS01-C2::ATS|C_UpdateRoyalty patron KoriID 10.0)
            ]
        ]
    )
)


(format "<<<<<<<Migrate DPMF [01] Costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(commit-tx)
(print "")