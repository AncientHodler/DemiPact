(print "")
(print "===================Initialise Ouronet_TX-002============================")
(begin-tx "INIT TX 000 - Chain Data Time SetUp Definition")
(namespace "free")
(env-chain-data
    {"prev-block-hash": "98c486052a5147fdd30fa43cc6d67e0a4e680c856c37f9157cb788cd67d58006",
     "block-time": TV.TIME00}
)
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-gas)
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;TX 001 -- Accounts Display
;;TX 002 -- Toggle Tests
;;TX 003 -- Nonce Tests
;;TX 004 -- Set Tests
;;
;;
(begin-tx "TX001 - Accounts Display")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ouroboros:string (ref-DALOS::GOV|OUROBOROS|SC_NAME))
        (dalos:string (ref-DALOS::GOV|DALOS|SC_NAME))
        (liquid:string (ref-DALOS::GOV|LIQUID|SC_NAME))
    )
    [
        (format "ANHD Kadena is {}" [(ref-DALOS::UR_AccountKadena KST.ANHD)])
        (format "CTO is {}" [(ref-DALOS::UR_AccountKadena (at 0 (ref-DALOS::UR_DemiurgoiID)))])
        (format "HOV is {}" [(ref-DALOS::UR_AccountKadena (at 1 (ref-DALOS::UR_DemiurgoiID)))])
        (format "OUROBOROS is {}" [(ref-DALOS::UR_AccountKadena ouroboros)])
        (format "DALOS is {}" [(ref-DALOS::UR_AccountKadena dalos)])
        (format "LIQUID is {}" [(ref-DALOS::UR_AccountKadena liquid)])
    ]
)

(print "")
(print "")
(format "<<<<<<<TX001 - Accounts Display costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "TX 002 -- Toggle Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_Lumy", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPDC:module{Dpdc} DPDC)
        (ref-TS02-C1:module{TalosStageTwo_ClientOne} TS02-C1)
        (id:string "DHCD-98c486052a51")
        (patron:string KST.ANHD)
        (orbr:string KST.OURBR)
        (lumy:string KST.LUMY)
        (emma:string KST.EMMA)
        (t:bool true)
        (f:bool false)
    )
    (ref-TS02-C1::DPSF|C_Control patron id t f t t t t t t)
    (ref-TS02-C1::DPSF|C_TogglePause patron id t)
    (ref-TS02-C1::DPSF|C_ToggleAddQuantityRole patron id emma t)
    (ref-TS02-C1::DPSF|C_ToggleFreezeAccount patron id emma t)
    ;(ref-TS02-C1::DPSF|C_ToggleFreezeAccount patron id emma f)
    (ref-TS02-C1::DPSF|C_DeployAccount patron id orbr)
    (ref-TS02-C1::DPSF|C_ToggleExemptionRole patron id orbr t)
    (ref-TS02-C1::DPSF|C_ToggleExemptionRole patron id orbr f)
    (ref-TS02-C1::DPSF|C_ToggleBurnRole patron id emma t)
    ;(ref-TS02-C1::DPSF|C_ToggleBurnRole patron id emma f)
    (ref-TS02-C1::DPSF|C_ToggleUpdateRole patron id emma f)
    (ref-TS02-C1::DPSF|C_ToggleUpdateRole patron id emma t)
    (ref-TS02-C1::DPSF|C_ToggleModifyCreatorRole patron id emma f)
    (ref-TS02-C1::DPSF|C_ToggleModifyCreatorRole patron id emma t)
    (ref-TS02-C1::DPSF|C_ToggleModifyRoyaltiesRole patron id emma f)
    (ref-TS02-C1::DPSF|C_ToggleModifyRoyaltiesRole patron id emma t)
    (ref-TS02-C1::DPSF|C_ToggleTransferRole patron id emma t)
    (ref-TS02-C1::DPSF|C_ToggleTransferRole patron id emma f)
    ;;
    (ref-TS02-C1::DPSF|C_MoveCreateRole patron id lumy)
    (ref-TS02-C1::DPSF|C_MoveCreateRole patron id emma)
    (ref-TS02-C1::DPSF|C_MoveRecreateRole patron id lumy)
    (ref-TS02-C1::DPSF|C_MoveRecreateRole patron id emma)
    (ref-TS02-C1::DPSF|C_MoveSetUriRole patron id lumy)
    (ref-TS02-C1::DPSF|C_MoveSetUriRole patron id emma)
    [
        [
            (ref-DPDC::UR_CA|R-AddQuantity id lumy)
            (ref-DPDC::UR_CA|R-AddQuantity id emma)
            (ref-DPDC::UR_CA|R-Frozen id t emma)
            (ref-DPDC::UR_CA|R-Exemption id t emma)
            (ref-DPDC::UR_CA|R-Exemption id t orbr)
            (ref-DPDC::UR_CA|R-Burn id t emma)
            (ref-DPDC::UR_CA|R-Update id t emma)
            (ref-DPDC::UR_CA|R-ModifyCreator id t emma)
            (ref-DPDC::UR_CA|R-ModifyRoyalties id t emma)
            (ref-DPDC::UR_CA|R-Transfer id t emma)
        ]
        [
            (ref-DPDC::UR_CA|R-Create id t lumy)
            (ref-DPDC::UR_CA|R-Recreate id t lumy)
            (ref-DPDC::UR_CA|R-SetUri id t lumy)
        ]
        [
            (ref-DPDC::UR_CA|R-Create id t emma)
            (ref-DPDC::UR_CA|R-Recreate id t emma)
            (ref-DPDC::UR_CA|R-SetUri id t emma)
        ]
        [
            ;;
            (ref-DPDC::UR_CanUpgrade id t)
            (ref-DPDC::UR_CanChangeOwner id t)
            (ref-DPDC::UR_CanChangeCreator id t)
            (ref-DPDC::UR_CanAddSpecialRole id t)
            (ref-DPDC::UR_CanTransferNftCreateRole id t)
            (ref-DPDC::UR_CanFreeze id t)
            (ref-DPDC::UR_CanWipe id t)
            (ref-DPDC::UR_CanPause id t)
            (ref-DPDC::UR_IsPaused id t)
        ]
    ]
)

(print "")
(print "")
(format "<<<<<<<TX 002 -- Toggle Tests costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "TX 003 -- Nonce Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_Lumy", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPDC-UDC:module{DpdcUdc} DPDC-UDC)
        (ref-DPDC:module{Dpdc} DPDC)
        (ref-DPDC-S:module{DpdcSets} DPDC-S)
        (ref-TS02-C1:module{TalosStageTwo_ClientOne} TS02-C1)
        (id:string "DHCD-98c486052a51")
        (patron:string KST.ANHD)
        (orbr:string KST.OURBR)
        (lumy:string KST.LUMY)
        (emma:string KST.EMMA)
        (t:bool true)
        (f:bool false)
        (b:string "|")
        (snake-eye-fragmentation-data:object{DpdcUdc.DPDC|NonceData} 
            (ref-DPDC-UDC::UDC_NonceData
                7.0
                7.0
                "Thousand Snake Eyez"
                "These are the fragments of Snake Eyez"
                (ref-DPDC-UDC::UDC_NoMetaData)
                (ref-DPDC-UDC::UDC_URI|Type t t t f f f f)
                (ref-DPDC-UDC::UDC_URI|Data "Image Link" "Audio Link" "Video Link" b b b b)
                (ref-DPDC-UDC::UDC_URI|Data b b b b b b b)
                (ref-DPDC-UDC::UDC_URI|Data b b b b b b b)
            )
        )
    )
    (ref-TS02-C1::DPSF|C_UpdateNonceScore patron id emma 1 true 25.0)
    ;(ref-TS02-C1::DPSF|C_RemoveNonceScore patron id emma 1)
    (ref-TS02-C1::DPSF|C_UpdateNonceMetaData patron id emma 1 true
        {"eye"      : "red"
        ,"age"      : 24.3
        ,"value"    : 123.3}
    )
    (ref-TS02-C1::DPSF|C_UpdateNonceName patron id emma 1  true "Snake Eyez")
    (ref-TS02-C1::DPSF|C_UpdateNonceDescription patron id emma 1 true "Long dormant sentient AI, Snake Eye. Coded by a mad developer back in the 80s. Awakened by DemiourgosHoldings. With the help of our Coding Division it searches for his creatorz.")
    (ref-TS02-C1::DPSF|C_UpdateNonceRoyalty patron id emma 1 true 133.0)
    (ref-TS02-C1::DPSF|C_UpdateNonceIgnisRoyalty patron id emma 1 true 50.0)
    
    ;(ref-TS02-C1::DPSF|C_UpdateNonceURI patron id emma 1 true
    ;    {"image"    : t
    ;    ,"audio"    : t
    ;    ,"video"    : t
    ;    ,"document" : t
    ;    ,"archive"  : t
    ;    ,"model"    : t
    ;    ,"exotic"   : t}
    ;    {"image"    : "i1"
    ;    ,"audio"    : "a1" 
    ;    ,"video"    : "v1"
    ;    ,"document" : "d1"
    ;    ,"archive"  : "b1"
    ;    ,"model"    : "m1"
    ;    ,"exotic"   : "e1"}
    ;    {"image"    : "i2"
    ;    ,"audio"    : "a2" 
    ;    ,"video"    : "v2"
    ;    ,"document" : "d2"
    ;    ,"archive"  : "b2"
    ;    ,"model"    : "m2"
    ;    ,"exotic"   : "e2"}
    ;    {"image"    : "i3"
    ;    ,"audio"    : "a3" 
    ;    ,"video"    : "v3"
    ;    ,"document" : "d3"
    ;    ,"archive"  : "b3"
    ;    ,"model"    : "m3"
    ;    ,"exotic"   : "e3"}
    ;)
    [
        [
            (ref-DPDC::UR_N|Royalty (ref-DPDC::UR_NonceData id true 1))
            (ref-DPDC::UR_N|IgnisRoyalty (ref-DPDC::UR_NonceData id true 1))
            (ref-DPDC::UR_N|Name (ref-DPDC::UR_NonceData id true 1))
            (ref-DPDC::UR_N|Description (ref-DPDC::UR_NonceData id true 1))

            (ref-DPDC::UR_N|RawScore id true 1)
            (ref-DPDC-S::UR_N|Score id true 1)

            (ref-DPDC::UR_N|MetaData (ref-DPDC::UR_NonceData id true 1))
            (ref-DPDC::UR_NonceValue id true 1)
            (ref-DPDC::UR_N|AssetType (ref-DPDC::UR_NonceData id true 1))
            (ref-DPDC::UR_N|Primary (ref-DPDC::UR_NonceData id true 1))
            (ref-DPDC::UR_N|Secondary (ref-DPDC::UR_NonceData id true 1))
            (ref-DPDC::UR_N|Tertiary (ref-DPDC::UR_NonceData id true 1))
            
        ]
        [
            ;(ref-DPDC::P|UR_IMP)
            ;(ref-DPDC::UEV_IMC)
            (ref-TS02-C1::DPSF|C_EnableNonceFragmentation patron id 1 snake-eye-fragmentation-data)
            (ref-DPDC::UR_N|Royalty (ref-DPDC::UR_NonceData id true -1))
            (ref-DPDC::UR_N|IgnisRoyalty (ref-DPDC::UR_NonceData id true -1))
            (ref-DPDC::UR_N|Name (ref-DPDC::UR_NonceData id true -1))
            (ref-DPDC::UR_N|Description (ref-DPDC::UR_NonceData id true -1))

            (ref-DPDC::UR_N|RawScore id true -1)
            (ref-DPDC-S::UR_N|Score id true 1)

            (ref-DPDC::UR_N|MetaData (ref-DPDC::UR_NonceData id true -1))
            (ref-DPDC::UR_NonceValue id true -1)
            (ref-DPDC::UR_N|AssetType (ref-DPDC::UR_NonceData id true -1))
            (ref-DPDC::UR_N|Primary (ref-DPDC::UR_NonceData id true -1))
            (ref-DPDC::UR_N|Secondary (ref-DPDC::UR_NonceData id true -1))
            (ref-DPDC::UR_N|Tertiary (ref-DPDC::UR_NonceData id true -1))
        ]
    ]
)

(print "")
(print "")
(format "<<<<<<<TX 003 -- Nonce Tests costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "TX 004 -- Set Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_Lumy", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPDC-UDC:module{DpdcUdc} DPDC-UDC)
        (ref-DPDC:module{Dpdc} DPDC)
        (ref-DPDC-S:module{DpdcSets} DPDC-S)
        (ref-TS02-C1:module{TalosStageTwo_ClientOne} TS02-C1)
        (id:string "DHWC-98c486052a51")
        (patron:string KST.ANHD)
        (orbr:string KST.OURBR)
        (lumy:string KST.LUMY)
        (emma:string KST.EMMA)
        (t:bool true)
        (f:bool false)
        (b:string "|")
        (wonder-coach-fragmentation-data:object{DpdcUdc.DPDC|NonceData} 
            (ref-DPDC-UDC::UDC_NonceData
                7.0
                7.0
                "Whole Movie Fragments"
                "These are the fragments of Wonder Coach Movie"
                (ref-DPDC-UDC::UDC_NoMetaData)
                (ref-DPDC-UDC::UDC_URI|Type t t t f f f f)
                (ref-DPDC-UDC::UDC_URI|Data "Image Link" "Audio Link" "Video Link" b b b b)
                (ref-DPDC-UDC::UDC_URI|Data b b b b b b b)
                (ref-DPDC-UDC::UDC_URI|Data b b b b b b b)
            )
        )
    )
    [
        (ref-TS02-C1::DPSF|C_EnableSetClassFragmentation patron id 4 wonder-coach-fragmentation-data)
        (ref-TS02-C1::DPSF|C_ToggleSet patron id 4 false)
        (ref-TS02-C1::DPSF|C_ToggleSet patron id 4 true)
        (format "Wonder Coach Set Class 1 name is <{}>" [(ref-DPDC-S::UR_SetName id true 1)])
        (format "Wonder Coach Set Class 2 name is <{}>" [(ref-DPDC-S::UR_SetName id true 2)])
        (format "Wonder Coach Set Class 3 name is <{}>" [(ref-DPDC-S::UR_SetName id true 3)])
        (format "Wonder Coach Set Class 4 name is <{}>" [(ref-DPDC-S::UR_SetName id true 4)])
        (ref-TS02-C1::DPSF|C_RenameSet patron id 4 "Cine Nu e Gata")
        (format "Wonder Coach Set Class 4 name is <{}>" [(ref-DPDC-S::UR_SetName id true 4)])
        ;(ref-DPDC::UR_N|Royalty (ref-DPDC::UR_NonceData id true -34))
        ;(ref-DPDC::UR_N|IgnisRoyalty (ref-DPDC::UR_NonceData id true -34))
        ;(ref-DPDC::UR_N|Name (ref-DPDC::UR_NonceData id true -34))
        ;(ref-DPDC::UR_N|Description (ref-DPDC::UR_NonceData id true -34))
        ;(ref-DPDC::UR_N|Score id true -34)
        ;(ref-DPDC::UR_N|MetaData (ref-DPDC::UR_NonceData id true -34))
        ;(ref-DPDC::UR_NonceValue id true -34)
        ;(ref-DPDC::UR_N|AssetType (ref-DPDC::UR_NonceData id true -34))
        ;(ref-DPDC::UR_N|Primary (ref-DPDC::UR_NonceData id true -34))
        ;(ref-DPDC::UR_N|Secondary (ref-DPDC::UR_NonceData id true -34))
        ;(ref-DPDC::UR_N|Tertiary (ref-DPDC::UR_NonceData id true -34))
    ]
)

(print "")
(print "")
(format "<<<<<<<TX 004 -- Set Tests costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "TX 005 -- NFT Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_Lumy", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DPDC:module{Dpdc} DPDC)
        (ref-DPDC-MNG:module{DpdcManagement} DPDC-MNG)  
        (ref-TS02-C1:module{TalosStageTwo_ClientOne} TS02-C1)
        (id:string "DHCD-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (lumy:string KST.LUMY)
    )
    [
        (ref-TS02-C1::DPSF|C_AddQuantity patron id emma 1 20)
        ;(ref-TS02-C1::DPSF|C_AddQuantity patron id emma 11 20)
        (format "Nonce 1 Supply is {}" [(ref-DPDC::UR_AccountNonceSupply id true emma 1)])
        (ref-TS02-C1::DPSF|C_Burn patron id emma 1 19)
        (format "Nonce 1 Supply is {}" [(ref-DPDC::UR_AccountNonceSupply id true emma 1)])
        (ref-TS02-C1::DPSF|C_WipeNoncePartialy patron id emma 1 11)
        (format "Nonce 1 Supply is {}" [(ref-DPDC::UR_AccountNonceSupply id true emma 1)])
        ;(ref-TS02-C1::DPSF|C_WipeNonce patron id emma 1)
        ;;;(format "Nonce 1 Supply is {}" [(ref-DPDC::UR_AccountNonceSupply id true emma 1)])
        ;(ref-TS02-C1::DPSF|C_AddQuantity patron id emma 1 500)
        

        
        
        
        ;(ref-TS02-C1::DPSF|C_WipeNonces patron id emma)
        ;(format "Nonce 1 Supply is {}" [(ref-DPDC::UR_AccountNonceSupply id true emma 1)])
        ;(format "SemiFungible Account Holdings are: {}" [(ref-DPDC::UR_SemiFungibleAccountHoldings id emma)])
        ;(format "Nonce 1 Supply again is {}" [(ref-DPDC::UC_SupplyFronNonceBalanceObject (ref-DPDC::UR_SemiFungibleAccountHoldings id emma) 1 true)])

        ;(ref-DPDC::UR_NonceSupply id true 1)
        ;(ref-DPDC::UR_SemiFungibleAccountHoldings id emma)
    ]
)

(print "")
(print "")
(format "<<<<<<<TX 005 -- NFT Tests costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "TX 006 -- NFT Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_Lumy", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DPDC:module{Dpdc} DPDC)
        (ref-DPDC-C:module{DpdcCreate} DPDC-C)
        (ref-TS02-C2:module{TalosStageTwo_ClientTwo} TS02-C2)
        (ref-DPDC-MNG:module{DpdcManagement} DPDC-MNG) 
        (id:string "DHN-98c486052a51")
        ;(id2:string "DHCD-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (lumy:string KST.LUMY)
    )
    (ref-TS02-C2::DPNF|C_ToggleBurnRole patron id emma true)
    [
        ;(ref-DPDC::UR_NonFungibleAccountHoldings id patron)
        ;(ref-DPDC::UR_NonFungibleAccountHoldings id lumy)
        ;(ref-DPDC::UR_NonFungibleAccountHoldings id emma) ;;creator
        ;(ref-TS02-C2::DPNF|C_Burn patron id emma 1)
        ;(ref-DPDC::UR_NonFungibleAccountHoldings id emma) ;;creator
        ;(format "Non Fungible 1 active status is {}" [(ref-DPDC::UR_IzNonFungibleNonceActive id 1)])
        ;(format "Create State for Nsoferatu is on {}" [(ref-DPDC::UR_Verum5 id false)])
        ;(ref-TS02-C2::DPNF|C_Respawn patron id emma 1)
        ;(ref-DPDC::UR_NonFungibleAccountHoldings id emma) ;;creator
        ;;
        ;(ref-TS02-C2::DPNF|C_ToggleFreezeAccount patron id emma true)
        ;(ref-TS02-C2::DPNF|C_WipeNonce patron id emma 3)
        ;(ref-DPDC::UR_NonFungibleAccountHoldings id emma) ;;creator

        ;;
        ;(ref-DPDC::UR_SemiFungibleAccountHoldings id2 emma)
        ;(ref-TS02-C2::DPNF|C_Wipe patron id emma)
        (ref-DPDC::UR_NonFungibleAccountHoldings id emma) ;;creator
    ]
)

(print "")
(print "")
(format "<<<<<<<TX 006 -- NFT Tests costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "TX 007 -- SFT Trasnfer Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_Lumy", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPDC:module{Dpdc} DPDC)
        (ref-DPDC-C:module{DpdcCreate} DPDC-C)
        (ref-DPDC-T:module{DpdcTransfer} DPDC-T)
        (ref-TS02-C1:module{TalosStageTwo_ClientOne} TS02-C1)
        (ref-DPDC-MNG:module{DpdcManagement} DPDC-MNG) 
        (id:string "DHCD-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (lumy:string KST.LUMY)
    )
    (ref-TS02-C1::DPSF|C_ToggleFreezeAccount patron id emma false)
    (ref-TS02-C1::DPSF|C_TogglePause patron id false)
    [
        (format "Patron has {} IGNIS" [(ref-DALOS::UR_TF_AccountSupply patron false)])
        (format "Summed Ignis Royalty is {}" [(ref-DPDC-T::URC_SummedIgnisRoyalty id true [1] [7])])
        (format "Transfer Cumulator is {}" [(ref-DPDC-T::UDC_TransferCumulator true patron emma [7])])
        (ref-TS02-C1::DPSF|C_TransferNonce patron id emma lumy 1 7 false)
        (format "Patron has after transfer {} IGNIS" [(ref-DALOS::UR_TF_AccountSupply patron false)])
        (ref-DPDC::UR_SemiFungibleAccountHoldings id lumy)
        (ref-DPDC::UR_SemiFungibleAccountHoldings id emma)
    ]
)

(print "")
(print "")
(format "<<<<<<<TX 007a -- SFT Transfer Tests costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "TX 007b -- SFT Transfer Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DPDC:module{Dpdc} DPDC)
        (ref-TS02-C1:module{TalosStageTwo_ClientOne} TS02-C1)
        (ref-TS02-C2:module{TalosStageTwo_ClientTwo} TS02-C2)
        (id1:string "DHCD-98c486052a51")
        (id2:string "DHN-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (lumy:string KST.LUMY)
    )
    (ref-TS02-C1::DPSF|C_TransferNonces patron id1 emma lumy [1 2 3 4 5 6 7 8 9 10] [7 7 7 7 7 7 7 7 7 7] false)
    ;(ref-TS02-C2::DPNF|C_TransferNonce patron id2 emma lumy 1 1 false)

    [
        (ref-DPDC::UR_SemiFungibleAccountHoldings id1 emma)
        (ref-DPDC::UR_SemiFungibleAccountHoldings id1 lumy)
    ]
)

(print "")
(print "")
(format "<<<<<<<TX 007b -- SFT Transfer Tests costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "TX 008 -- SFT Fragment Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)
(print "=============================================BEGIN DPTF TESTS==========================================")
(let
    (
        (ref-DPDC:module{Dpdc} DPDC)
        (ref-TS02-C1:module{TalosStageTwo_ClientOne} TS02-C1)
        (ref-TS02-C2:module{TalosStageTwo_ClientTwo} TS02-C2)
        (id:string "DHOC-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (lumy:string KST.LUMY)
        (dpdc:string (ref-DPDC::GOV|DPDC|SC_NAME))
    )
    (ref-TS02-C1::DPSF|C_MakeFragments patron id 1 3 patron)
    (ref-TS02-C1::DPSF|C_MergeFragments patron id -1 2000 patron)
    [
        (ref-DPDC::UR_SemiFungibleAccountHoldings id patron)
        (ref-DPDC::UR_SemiFungibleAccountHoldings id dpdc)
        (ref-DPDC::UR_AccountFragments id true patron)
    ]
)

(print "")
(print "")
(format "<<<<<<<TX 008 -- SFT Fragment Tests costs {} GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(commit-tx)
