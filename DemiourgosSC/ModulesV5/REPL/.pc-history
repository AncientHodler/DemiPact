(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage01_Tester.repl")
(load "Stage01_Tester.repl")
(load "Stage01_Tester.repl")
(load "Stage01_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(fold (+) 0.0 [0.0, 3540.000000000000000000000000, 13.273150053835, 4510.0, 0.0, 0.0, 0.0, 1.0, 1.0, 0.0, 0.0, 0.0, 0.0, 0.077576691954, 2.906534361084, 0.0, 10.0, 1.0, 0.0, 0.0, 0.000000002284, 0.0, 0.0, 60.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0])
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(= [{"o":0, "s":0}] [{"o":0, "s":0}])
(load "Stage02_Tester.repl")
(zip (lambda (n:integer a:integer) (free.DPDC.UDC_DPSF|NonceBalance n a)) [1 2] [23 44])
(zip (lambda (n:integer a:integer) (free.DPDC.UDC_DPSF|NonceBalance n a)) [1 2] [23 44])
(load "Stage02_Tester.repl")
(zip (lambda (n:integer a:integer) (free.DPDC.UDC_DPSF|NonceBalance n a)) [1 2] [23 44])
(zip (lambda (n:integer a:integer) (free.DPDC.UDC_DPSF|NonceBalance n a)) nonces-to-modify amounts-to-modify-with)
(zip (lambda (n:integer a:integer) {"nonce": n, "supply": a}) [1 2] [10 100])
(zip (lambda (n:integer a:integer) {"nonce": n, "supply": a}) [1 2] [10 100])
(zip (lambda (n:integer a:integer ) {"nonce": n, "supply": a}) [1 2] [10 100]))
(zip (lambda (n:integer a:integer ) {"nonce": n, "supply": a} [1 2] [10 100]))
(= {"o":0, "s":0} {"o":0, "s":0})
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(load "Stage02_Tester.repl")
(- [1 2 3 4 5 6] [3 5])
(+ [1 2 3 4 5 6] [3 5])
(- [1 2 3 4 5 6] [3 5])
(make-list 5 true)
(free.U|INT.UC_SplitAuxiliaryIntegerList [-1 -2 -23 -3 -4] [22 33 44 55 66])
(free.U|INT.UC_SplitAuxiliaryIntegerList [-1 -2 2 3 4] [22 33 44 55 66])
(load "Stage01_Tester.repl")
(free.U|INT.UC_SplitAuxiliaryIntegerList [-1 -2 2 3 4] [22 33 44 55 66])
(free.U|INT.UC_SplitIntegerList [-1 -2 2 3 4])
(load "Stage01_Tester.repl")
(filter (lambda (x:integer) (> x 0)) [-1 -4 -23 -22])
(filter (lambda (x:integer) (> x 0)) [-1 -4 4 0 8 72 -23 -22 11])
