;MODULE LOADINGS
;;==============================================================================
;; PART 01 - Load all Mockup Enviroment Modules
(load "../../../kadena_repl_sandbox-main/kda-env/init.repl")
(load "../Initialise_DALOS_short-cpt.repl")
;(load "../Initialise_DALOS.repl")
(print "LOADED ALL ENV MODULES")

;;Entering Namespace Free
(namespace "free")

(begin-tx "Constant Moduel")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(module KC GOVERNANCE
    (defcap GOVERNANCE () true)

    (defconst ANHD "Ѻ.éXødVțrřĄθ7ΛдUŒjeßćιiXTПЗÚĞqŸœÈэαLżØôćmч₱ęãΛě$êůáØCЗшõyĂźςÜãθΘзШË¥şEÈnxΞЗÚÏÛjDVЪжγÏŽнăъçùαìrпцДЖöŃȘâÿřh£1vĎO£κнβдłпČлÿáZiĐą8ÊHÂßĎЩmEBцÄĎвЙßÌ5Ï7ĘŘùrÑckeñëδšПχÌàî")
    (defconst FLRN "Ѻ.ÍăüÙÜЦżΦF₿ÈшÕóñĐĞGюѺλωÇțnθòoйEςк₱0дş3ôPpxŞțqgЖ€šωbэočΞìČ5òżŁdŒИöùЪøŤяжλзÜ2ßżpĄγïčѺöэěτČэεSčDõžЩУЧÀ₳ŚàЪЙĎpЗΣ2ÃлτíČнÙyéÕãďWŹŘĘźσПåbã€éѺι€ΓφŠ₱ŽyWcy5ŘòmČ₿nβÁ¢¥NЙëOι")
    (defconst EMMA "Ѻ.A0ěьπΨтÎșπЦĐđŽ6ЫêÀεÅĐȘдÞЩ4Ł2ďй5žömiτsλÚÇдěÒaV₱ÏûιЩД₳îJÍşыyÜŹżęìvAЙsÄ¢ÿnΦIťQůЮ7ĄвaèďíoáнõÎLJθÆEáПiXÿÒÀĘ14цU1çΞêSťüIψчèι₱ê9ŽчΓüЦrÀÓμĆ99κQťqPÖшŮ1ÈČSĐŁÌбÝàŞbPσŃĎ8ĄW")
    (defconst BYTA "Ѻ.CЭΞŸNGúůρhãmИΘÛ¢₳šШдìAÚwŚGýηЗПAÊУÔȘřŽÍζЗηmΔφDmcдΛъ₳tĂýăŮsПÞ$öœGθeBŽvąαÃfçл¢ĎĆď$şbsЦэΘNÄëÍĂνуãöž¥àZjÆůšÁœôñχŽâЩåτâн4μфAOçĎΓuЗŮnøЙãĚè6Дżîþż$цÑûρψŻïZÉλûæřΨeèÎígςeL")
    (defconst LUMY "Ѻ.œâσzüştŒhłσćØTöõúoвþçЧлρËШđюλ2ÙPeжŘťȚŤtθËûrólþŘß₿øuŁdáNÎČȘřΦĘbχλΩĄ¢ц2ŹθõĐLcÑÁäăå₿ξЭжулxòΘηĂœŞÝUËcω∇ß$ωoñД7θÁяЯéEU¢CЮxÃэJĘčÎΠ£αöŮЖбlćшbăÙЦÎAдŃЭб$ĞцFδŃËúHãjÁÝàĘSt")
    (defconst COCA "Ѻ.áлÜŹZУαŻεvΩ€ÍÉźR5ΠúÉźηüΠÇτOVòÀgZZΠåÈдZëыуЛфЮ13φúνýhMαĄαÖìÍxнпĞjȚ¥бę¥šÔπΓ€Mnøí3ЧθźąйπĆTÌqooŽůŠóŚhřkžφHÿŽBДχpLÉeõxòσûEÜàμΓтÆdôûяàΞRηøćχdîфЩЗьδńŁ$Ü9ř∇ŸŠωVξЦF¢ĆĞÂ₱Ž")
    (defconst KISS "Ѻ.ÔřЦΠúlAŻвnŞÄȘнШĚЖÉřÉĐqлþåΦÉЩвØúÄΣNéSaPpmζżŽtηËJgνπΞ$ЗhêPúÏ£BÀp£β$z7ЯđòÔμЛюGЧĄ7xóЮGЮдYнșШΠŸRA¢śÉ4кAłůaDжp£σÏđχ6ïDжâ5uęΠşÖMþ4¥эăì3cXÛΘИÛźéËBÏžЙŁKjчψĎρЩlźEüśЯŁщbφ2")
    (defconst PLCS "Ѻ.BDțΛZУЩAwÅhУ¥бйeÄGjЯÔIŽ0ΣмωýOÒμψĚяуÿñUĐ€Ú£gâχΓπóÒïЮáпZЧhЫÄIsńËfźÄ1VXУõŘéiàшdĄΞχôCнsÛíÌáàЧßojΛaIλŹЮBøğÔWmòηвá€0ïЗUĞůпøůэóΞÁŘśяŃeÁďfσäKÏßżȚȘÿŒșεúêβÜèkyφΛrβБяK₳ě₱4")
    (defconst NANI "Ѻ.ЮÝžuÂěуşъøŞrΣσQxvЛòÁćÇлςÿŃYóγõыxÁùöÞÁ₳Ю5šШβíюťğÀÎrÿΛůßXЧщŹюДáŻяιËÔŘЬL4₱ĎěJ8ÃHËÏxĆŞÂÜûBcЭШκÙçóьÞÓŮεUIη2ЯąąÙJζÍêíEȘÇșÇOćΞșъÒýĂ₱χÅкGoЗИůω1cþÑŻÁжиáÿιŞŠÓŒлKõÏE₿ÌxYИн")
    (defconst AOZT "Ѻ.ÅτhGźνΣhςвiàÁĘĚДÏWÉΨTěCÃŒnæi9цéŘQí¢лΞÛIчмfÓeżÜýЯàDÖ5αȚÞVđσγ₱0ęЬÔĄsĄLлKùvåH£ΞMFУûÊyđÜqdŽŚЖsĘъsПÂÔØŹÞŮγŚΣЧ6Ïж¢чPyòлБ14ÚęŃĄåîêтηΛbΦđkûÇĂζsБúĎdŸUЛзÙÂÚJηXťćж¥zщòÁŸRĘ")

    (defconst TALOS "Σ.W∇ЦwÏξБØnζΦψÕłěîбηжÛśTã∇țâĆã4ЬĚIŽȘØíÕlÛřбΩцμCšιÄиMkλ€УщшàфGřÞыÎäY8È₳BDÏÚmßOozBτòÊŸŹjПкцğ¥щóиś4h4ÑþююqςA9ÆúÛȚβжéÑψéУoЭπÄЩψďşõшżíZtZuψ4ѺËxЖψУÌбЧλüșěđΔjÈt0ΛŽZSÿΞЩŠ")
    (defconst ATSTK "Σ.ëŤΦșźUÉM89ŹïuÆÒÕ£żíëцΘЯнŹÿxжöwΨ¥Пууhďíπ₱nιrŹÅöыыidõd7ì₿ипΛДĎĎйĄшΛŁPMȘïõμîμŻIцЖljÃαbäЗŸÖéÂЫèpAДuÿPσ8ÎoŃЮнsŤΞìтČ₿Ñ8üĞÕPșчÌșÄG∇MZĂÒЖь₿ØDCПãńΛЬõŞŤЙšÒŸПĘЛΠws9€ΦуêÈŽŻ")
    (defconst VESTG "Σ.şZïζhЛßdяźπПЧDΞZülΦпφßΣитœŸ4ó¥ĘкÌЦ₱₱AÚюłćβρèЬÍŠęgĎwтäъνFf9źdûъtJCλúp₿ÌнË₿₱éåÔŽvCOŠŃpÚKюρЙΣΩìsΞτWpÙŠŹЩпÅθÝØpтŮыØșþшу6GтÃêŮĞбžŠΠŞWĆLτЙđнòZЫÏJÿыжU6ŽкЫVσ€ьqθtÙѺSô€χ")
    (defconst LIQST "Σ.śκν9₿ŻşYЙΣJΘÊO9jпF₿wŻ¥уPэõΣÑïoγΠθßÙzěŃ∇éÖиțșφΦτşэßιBιśiĘîéòюÚY$êFЬŤØ$868дyβT0ςъëÁwRγПŠτËMĚRПMaäЗэiЪiςΨoÞDŮěŠβLé4čØHπĂŃŻЫΣÀmăĐЗżłÄăiĞ₿йÎEσțłGΛЖΔŞx¥ÁiÙNğÅÌlγ¢ĎwдŃ")
    (defconst OURBR "Σ.4M0èÞbøXśαiΠ€NùÇèφqλËãØÓNCнÌπпЬ4γTмыżěуàđЫъмéLUœa₿ĞЬŒѺrËQęíùÅЬ¥τ9£φď6pÙ8ìжôYиșîŻøbğůÞχEшäΞúзêŻöŃЮüŞöućЗßřьяÉżăŹCŸNÅìŸпĐżwüăŞãiÜą1ÃγänğhWg9ĚωG₳R0EùçGΨфχЗLπшhsMτξ")
    (defconst SWAPR "Σ.fĘĐżØиmΞüȚÓ0âGœȘйцań₿ѺĐЦãúα0šwř4QąйZЛgãŽ₿ßÇöđ2zFtмÄäþťûκpíČX₳ĂBÞãÅhλÚțqýвáêйâ₳ЫDżfÙŃλыêąйíâβPЫůjыáaπÕpnýOĄåęümÚJηğȘôρ8şnνEβęůйΛÑćλòxЧUdÑĎÈčVΞÌFAx£Ы2τżŻzДŽYуRČñÜ")

    (defconst TG
        [
            {"node": "OURO", "links":["PK" "DLK" "DWK"]}
            {"node": "PK", "links":["OURO" "EK" "AK"]}
            {"node": "EK", "links":["PK" "AK"]}
            {"node": "AK", "links":["PK" "EK"]}
            {"node": "DLK", "links":["OURO" "DWK"]}
            {"node": "DWK", "links":["DLK" "OURO"]}
        ]
    )
    (defconst TG2
        [
            {"node": "OURO", "links":["PK" "DLK" "DWK" "VST" "ESTAR"]}
            {"node": "PK", "links":["OURO" "EK" "AK"]}
            {"node": "EK", "links":["PK" "AK" "ESTAR"]}
            {"node": "AK", "links":["PK" "EK" "VST"]}
            {"node": "DLK", "links":["OURO" "DWK" "ESTAR"]}
            {"node": "DWK", "links":["DLK" "OURO" "VST"]}
            {"node": "VST", "links":["DWK" "OURO" "AK"]}
            {"node": "ESTAR", "links":["DLK" "OURO" "EK"]}
        ]
    )
    (defconst TG3
        [
            {"node": "OURO", "links":["DWK" "DLK" "ESTAR" "VST" "XLH" "PK"]}
            {"node": "DWK", "links":["OURO" "DLK"]}
            {"node": "DLK", "links":["DWK" "OURO" "ESTAR" "VST" "XLH" "PK"]}
            {"node": "PK", "links":["OURO" "DLK" "AK" "EK"]}
            {"node": "AK", "links":["PK" "EK"]}
            {"node": "EK", "links":["PK" "AK"]}
            {"node": "ESTAR", "links":["OURO" "DLK"]}
            {"node": "VST", "links":["OURO" "DLK"]}
            {"node": "XLH", "links":["OURO" "DLK"]}
        ]
    )

    (defconst TG4
        [
            {"node": "OURO-98c486052a51","links": ["DLK-98c486052a51" "DWK-98c486052a51"]}
            {"node": "PKOSON-98c486052a51","links": ["EKOSON-98c486052a51" "AKOSON-98c486052a51" "OURO-98c486052a51"]}
            {"node": "DLK-98c486052a51","links": ["OURO-98c486052a51" "DWK-98c486052a51"]}
            {"node": "DWK-98c486052a51","links": ["DLK-98c486052a51" "OURO-98c486052a51"]}
        ]
    )
)

(env-gas)
(commit-tx)


(begin-tx "Compute D1")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let*
    (
        (A:decimal 85.0)
        (X:[decimal] [1000.0 1000.0 1000.0])
        (input-amount:decimal 50.0)
        (ip:integer 0)
        (op:integer 1)

        (xi:decimal (at ip X))
        (xn:decimal (+ xi input-amount))
        (XX:[decimal] (free.UTILS.LIST|UC_ReplaceAt X ip xn))
        (NewD:decimal (free.SUT.SWP|UC_ComputeD A XX))
        (y0:decimal (+ (at op X) input-amount))
        (output-lst:[decimal]
            (fold
                (lambda
                    (y-values:[decimal] idx:integer)
                    (let*
                        (
                            (prev-y:decimal (at idx y-values))
                            (y-value:decimal (free.SUT.SWP|UC_YNext prev-y NewD A X op))
                        )
                        (free.UTILS.LIST|UC_AppendLast y-values y-value)
                    )
                )
                [y0]
                (enumerate 0 10)
            )
        )
        (output:decimal (- (free.UTILS.LIST|UC_LastListElement output-lst) (at op X)))
    )
    [
        xi
        xn
        XX
        NewD
        y0
        output-lst
        output
    ]
)


(print "YCompute")
(free.SUT.SWP|UC_YNext 
    1050.0
    3049.998940783501587705216737
    85.0
    [1000.0 1000.0 1000.0]
    1
)


(env-gas)
(commit-tx)

(begin-tx "Compute D1")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(free.SUT.GRPH|UC_PrimalQE KC.TG "OURO")
(let*
    (
        (qe:[object{free.SUT.QE}] (free.SUT.GRPH|UC_PrimalQE KC.TG "OURO"))
        (e1:object{free.SUT.QE} (at 0 qe))
        (ex:object{free.SUT.QE} (free.SUT.GRPH|UC_ExtendChain e1 "EK"))
    )
    ex
)

(print "EQE is")
free.SUT.EQE

(print "EBFS is")
free.SUT.EBFS

(print "ExtendTest")

(free.SUT.SUT|UC_ExStrLst ["c"] ["a" "b"])
(free.SUT.SUT|UC_ExStrArrLst [["fe"]] [["a" "b"] ["c" "d"]]) 


(print "Modify BFS")
(free.SUT.GRPH|UDC_AddVisited free.SUT.EBFS ["ouro"])
(free.SUT.GRPH|UDC_AddChains free.SUT.EBFS [["ouro" "pk"]])

(print "Modify BFS 2")
(let*
    (
        (x1:object{free.SUT.BFS} (free.SUT.GRPH|UDC_AddToQue free.SUT.EBFS [{"node":"PK", "chain":["AK" "EK"]}]))
        (x2:object{free.SUT.BFS} (free.SUT.GRPH|UDC_AddToQue x1 [{"node":"OURO", "chain":["DWK" "DLK"]}]))
        (x3:object{free.SUT.BFS} (free.SUT.GRPH|UDC_RmFromQue x2))
    )
    x3
)
;(free.SUT.SUT|UDC_AddToQue free.SUT.EBFS {"node":"PK", "chain":["AK" "EK"]})

(env-gas)
(commit-tx)




(begin-tx "Compute WP")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(print "Test Weighted Swap")
(free.SUT.SWP|UC_ComputeWP
    [500.0 300.0 200.0]
    [40.0 30.0]
    [0 1]
    2
    24
    [0.5 0.3 0.2]
)

(print "P Probe with weigths")
(free.SUT.SWP|UC_ComputeWP
    [500.0 300.0 200.0]
    [40.0 30.0]
    [0 1]
    2
    24
    [1.0 1.0 1.0]
)



(env-gas)
(commit-tx)

(print "==================================================================")
(begin-tx "Compute BFS")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let*
    (
        (x1:[string] (free.SUT.GRPH|UC_GraphNodes KC.TG4))
        (x2:[integer] (free.UTILS.LIST|UC_Search x1 "OURO-98c486052a51"))
    )
    x1
)

(print "Working")
(free.SUT.GRPH|UC_GraphNodeLinks KC.TG4 "OURO-98c486052a51")

(print "Filter")
;(filter (lambda (x:[string]) (!= (take -1 x) "DLK-98c486052a51")) (at "chains" (free.SUT.GRPH|UC_BFS KC.TG4 "OURO-98c486052a51")))

(print "Not Working")

;(print "Remove Visited Test")

(let*
    (
        (dlk:string "DLK-98c486052a51")
        (x:[[string]] (at "chains" (free.SUT.GRPH|UC_BFS KC.TG4 "OURO-98c486052a51")))
        (fx:[[string]]
            (fold
                (lambda
                    (acc:[[string]] idx:integer)
                    (let*
                        (
                            (e:[string] (at idx x))
                            (l:string (at 0 (take -1 e)))
                            (check:bool (= l dlk))
                        )
                        (if (not check)
                            (free.UTILS.LIST|UC_RemoveItem acc e)
                            acc
                        )
                    )
                )
                x
                (enumerate 0 (- (length x) 1))
            )
        )
        (svl:[decimal] [1.2 0.2 33.2 0.98 0.7 2.3 2.1 0.69 0.87 0.99])
        (sp:integer
            (fold
                (lambda
                    (acc:integer idx:integer)
                    (if (= idx 0)
                        acc
                        (if (< (at idx svl) (at acc svl))
                            idx
                            acc
                        )

                    )
                )
                0
                (enumerate 0 (- (length svl) 1))
            )
        )

    )
    sp
)

(env-gas)
(commit-tx)


;82499.308365845512581303649233

    ;82499.308365845523|397120128828
    ;82499.308365845523|483992994197


 ;      0.000000000004157597263656

 ;0.000000000004157597263656
 ;0.000000000001881818555775
 ;0.000000000002569218728395

;82499.3                                 0.008365955235808001750589     going up until you hit negative
;82499.4                                -0.091635356144560510880607     is negative; go up with more precision
;82499.31                               -0.001634175907220075069758     still negative, go down with more precision
;82499.309                              -0.000634162792954691379353     still negative, go down with more precision
;82499.3089                             -0.000534161481543374407159


;;82499.3                                   0.008365955235808001750589     
;;          output: POS         => NXT: [> this value]                              => 82499.4
;;
;;82499.4                                  -0.091635356144560510880607
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.31
;;
;;82499.31                                 -0.001634175907220075069758
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.301
;;
;;82499.301                                 0.007365942121458975481599
;;          output: POS         => NXT: [> this value]                              => 82499.302
;;
;;82499.302                                 0.006365929007114356949647
;;          output: POS         => NXT: [> this value]                              => 82499.303
;;
;;82499.303                                 0.005365915892788803807043
;;          output: POS         => NXT: [> this value]                              => 82499.304
;;
;;82499.304                                 0.004365902778467658400801
;;          output: POS         => NXT: [> this value]                              => 82499.305
;;
;;82499.305                                 0.003365889664165578382876
;;          output: POS         => NXT: [> this value]                              => 82499.306
;;
;;82499.306                                 0.002365876549867906100637
;;          output: POS         => NXT: [> this value]                              => 82499.307
;;
;;82499.307                                 0.001365863435574641553923
;;          output: POS         => NXT: [> this value]                              => 82499.308
;;
;;82499.308                                 0.000365850321300442394158
;;          output: POS         => NXT: [> this value]                              => 82499.309
;;
;;82499.309                                -0.000634162792954691379353
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.3081
;;
;;82499.3081                                0.000265849009831417308383
;;          output: POS         => NXT: [> this value]                              => 82499.3082
;;
;;82499.3082                                0.000165847698406262678183
;;          output: POS         => NXT: [> this value]                              => 82499.3083
;;
;;82499.3083                                0.000065846386981005548812
;;          output: POS         => NXT: [> this value]                              => 82499.3084
;;
;;82499.3084                               -0.000034154924429696428219
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.30831
;;
;;82499.30831                               0.000055846255845803024184
;;          output: POS         => NXT: [> this value]                              => 82499.30832
;;
;;82499.30832                               0.000045846124710599474563
;;          output: POS         => NXT: [> this value]                              => 82499.30833
;;
;;82499.30833                               0.000035845993575394899948
;;          output: POS         => NXT: [> this value]                              => 82499.30834
;;
;;82499.30834                               0.000025845862440189300340
;;          output: POS         => NXT: [> this value]                              => 82499.30835
;;
;;82499.30835                               0.000015845731304982675738
;;          output: POS         => NXT: [> this value]                              => 82499.30836
;;
;;82499.30836                               0.000005845600169775026143
;;          output: POS         => NXT: [> this value]                              => 82499.30837
;;
;;82499.30837                              -0.000004154530965433648446
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.308361
;;