;MODULE LOADINGS
;;==============================================================================
;; PART 01 - Load all Mockup Enviroment Modules
(load "../../../kadena_repl_sandbox-main/kda-env/init.repl")
(load "../Initialise_DALOS_short-cpt.repl")
;(load "../Initialise_DALOS.repl")
(print "LOADED ALL ENV MODULES")

;;Entering Namespace Free
(namespace "free")

(begin-tx "Constant Moduel")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(module KC GOVERNANCE
    (defcap GOVERNANCE () true)

    (defconst ANHD "Ѻ.éXødVțrřĄθ7ΛдUŒjeßćιiXTПЗÚĞqŸœÈэαLżØôćmч₱ęãΛě$êůáØCЗшõyĂźςÜãθΘзШË¥şEÈnxΞЗÚÏÛjDVЪжγÏŽнăъçùαìrпцДЖöŃȘâÿřh£1vĎO£κнβдłпČлÿáZiĐą8ÊHÂßĎЩmEBцÄĎвЙßÌ5Ï7ĘŘùrÑckeñëδšПχÌàî")
    (defconst FLRN "Ѻ.ÍăüÙÜЦżΦF₿ÈшÕóñĐĞGюѺλωÇțnθòoйEςк₱0дş3ôPpxŞțqgЖ€šωbэočΞìČ5òżŁdŒИöùЪøŤяжλзÜ2ßżpĄγïčѺöэěτČэεSčDõžЩУЧÀ₳ŚàЪЙĎpЗΣ2ÃлτíČнÙyéÕãďWŹŘĘźσПåbã€éѺι€ΓφŠ₱ŽyWcy5ŘòmČ₿nβÁ¢¥NЙëOι")
    (defconst EMMA "Ѻ.A0ěьπΨтÎșπЦĐđŽ6ЫêÀεÅĐȘдÞЩ4Ł2ďй5žömiτsλÚÇдěÒaV₱ÏûιЩД₳îJÍşыyÜŹżęìvAЙsÄ¢ÿnΦIťQůЮ7ĄвaèďíoáнõÎLJθÆEáПiXÿÒÀĘ14цU1çΞêSťüIψчèι₱ê9ŽчΓüЦrÀÓμĆ99κQťqPÖшŮ1ÈČSĐŁÌбÝàŞbPσŃĎ8ĄW")
    (defconst BYTA "Ѻ.CЭΞŸNGúůρhãmИΘÛ¢₳šШдìAÚwŚGýηЗПAÊУÔȘřŽÍζЗηmΔφDmcдΛъ₳tĂýăŮsПÞ$öœGθeBŽvąαÃfçл¢ĎĆď$şbsЦэΘNÄëÍĂνуãöž¥àZjÆůšÁœôñχŽâЩåτâн4μфAOçĎΓuЗŮnøЙãĚè6Дżîþż$цÑûρψŻïZÉλûæřΨeèÎígςeL")
    (defconst LUMY "Ѻ.œâσzüştŒhłσćØTöõúoвþçЧлρËШđюλ2ÙPeжŘťȚŤtθËûrólþŘß₿øuŁdáNÎČȘřΦĘbχλΩĄ¢ц2ŹθõĐLcÑÁäăå₿ξЭжулxòΘηĂœŞÝUËcω∇ß$ωoñД7θÁяЯéEU¢CЮxÃэJĘčÎΠ£αöŮЖбlćшbăÙЦÎAдŃЭб$ĞцFδŃËúHãjÁÝàĘSt")
    (defconst COCA "Ѻ.áлÜŹZУαŻεvΩ€ÍÉźR5ΠúÉźηüΠÇτOVòÀgZZΠåÈдZëыуЛфЮ13φúνýhMαĄαÖìÍxнпĞjȚ¥бę¥šÔπΓ€Mnøí3ЧθźąйπĆTÌqooŽůŠóŚhřkžφHÿŽBДχpLÉeõxòσûEÜàμΓтÆdôûяàΞRηøćχdîфЩЗьδńŁ$Ü9ř∇ŸŠωVξЦF¢ĆĞÂ₱Ž")
    (defconst KISS "Ѻ.ÔřЦΠúlAŻвnŞÄȘнШĚЖÉřÉĐqлþåΦÉЩвØúÄΣNéSaPpmζżŽtηËJgνπΞ$ЗhêPúÏ£BÀp£β$z7ЯđòÔμЛюGЧĄ7xóЮGЮдYнșШΠŸRA¢śÉ4кAłůaDжp£σÏđχ6ïDжâ5uęΠşÖMþ4¥эăì3cXÛΘИÛźéËBÏžЙŁKjчψĎρЩlźEüśЯŁщbφ2")
    (defconst PLCS "Ѻ.BDțΛZУЩAwÅhУ¥бйeÄGjЯÔIŽ0ΣмωýOÒμψĚяуÿñUĐ€Ú£gâχΓπóÒïЮáпZЧhЫÄIsńËfźÄ1VXУõŘéiàшdĄΞχôCнsÛíÌáàЧßojΛaIλŹЮBøğÔWmòηвá€0ïЗUĞůпøůэóΞÁŘśяŃeÁďfσäKÏßżȚȘÿŒșεúêβÜèkyφΛrβБяK₳ě₱4")
    (defconst NANI "Ѻ.ЮÝžuÂěуşъøŞrΣσQxvЛòÁćÇлςÿŃYóγõыxÁùöÞÁ₳Ю5šШβíюťğÀÎrÿΛůßXЧщŹюДáŻяιËÔŘЬL4₱ĎěJ8ÃHËÏxĆŞÂÜûBcЭШκÙçóьÞÓŮεUIη2ЯąąÙJζÍêíEȘÇșÇOćΞșъÒýĂ₱χÅкGoЗИůω1cþÑŻÁжиáÿιŞŠÓŒлKõÏE₿ÌxYИн")
    (defconst AOZT "Ѻ.ÅτhGźνΣhςвiàÁĘĚДÏWÉΨTěCÃŒnæi9цéŘQí¢лΞÛIчмfÓeżÜýЯàDÖ5αȚÞVđσγ₱0ęЬÔĄsĄLлKùvåH£ΞMFУûÊyđÜqdŽŚЖsĘъsПÂÔØŹÞŮγŚΣЧ6Ïж¢чPyòлБ14ÚęŃĄåîêтηΛbΦđkûÇĂζsБúĎdŸUЛзÙÂÚJηXťćж¥zщòÁŸRĘ")

    (defconst TALOS "Σ.W∇ЦwÏξБØnζΦψÕłěîбηжÛśTã∇țâĆã4ЬĚIŽȘØíÕlÛřбΩцμCšιÄиMkλ€УщшàфGřÞыÎäY8È₳BDÏÚmßOozBτòÊŸŹjПкцğ¥щóиś4h4ÑþююqςA9ÆúÛȚβжéÑψéУoЭπÄЩψďşõшżíZtZuψ4ѺËxЖψУÌбЧλüșěđΔjÈt0ΛŽZSÿΞЩŠ")
    (defconst ATSTK "Σ.ëŤΦșźUÉM89ŹïuÆÒÕ£żíëцΘЯнŹÿxжöwΨ¥Пууhďíπ₱nιrŹÅöыыidõd7ì₿ипΛДĎĎйĄшΛŁPMȘïõμîμŻIцЖljÃαbäЗŸÖéÂЫèpAДuÿPσ8ÎoŃЮнsŤΞìтČ₿Ñ8üĞÕPșчÌșÄG∇MZĂÒЖь₿ØDCПãńΛЬõŞŤЙšÒŸПĘЛΠws9€ΦуêÈŽŻ")
    (defconst VESTG "Σ.şZïζhЛßdяźπПЧDΞZülΦпφßΣитœŸ4ó¥ĘкÌЦ₱₱AÚюłćβρèЬÍŠęgĎwтäъνFf9źdûъtJCλúp₿ÌнË₿₱éåÔŽvCOŠŃpÚKюρЙΣΩìsΞτWpÙŠŹЩпÅθÝØpтŮыØșþшу6GтÃêŮĞбžŠΠŞWĆLτЙđнòZЫÏJÿыжU6ŽкЫVσ€ьqθtÙѺSô€χ")
    (defconst LIQST "Σ.śκν9₿ŻşYЙΣJΘÊO9jпF₿wŻ¥уPэõΣÑïoγΠθßÙzěŃ∇éÖиțșφΦτşэßιBιśiĘîéòюÚY$êFЬŤØ$868дyβT0ςъëÁwRγПŠτËMĚRПMaäЗэiЪiςΨoÞDŮěŠβLé4čØHπĂŃŻЫΣÀmăĐЗżłÄăiĞ₿йÎEσțłGΛЖΔŞx¥ÁiÙNğÅÌlγ¢ĎwдŃ")
    (defconst OURBR "Σ.4M0èÞbøXśαiΠ€NùÇèφqλËãØÓNCнÌπпЬ4γTмыżěуàđЫъмéLUœa₿ĞЬŒѺrËQęíùÅЬ¥τ9£φď6pÙ8ìжôYиșîŻøbğůÞχEшäΞúзêŻöŃЮüŞöućЗßřьяÉżăŹCŸNÅìŸпĐżwüăŞãiÜą1ÃγänğhWg9ĚωG₳R0EùçGΨфχЗLπшhsMτξ")
    (defconst SWAPR "Σ.fĘĐżØиmΞüȚÓ0âGœȘйцań₿ѺĐЦãúα0šwř4QąйZЛgãŽ₿ßÇöđ2zFtмÄäþťûκpíČX₳ĂBÞãÅhλÚțqýвáêйâ₳ЫDżfÙŃλыêąйíâβPЫůjыáaπÕpnýOĄåęümÚJηğȘôρ8şnνEβęůйΛÑćλòxЧUdÑĎÈčVΞÌFAx£Ы2τżŻzДŽYуRČñÜ")
)

(env-gas)
(commit-tx)


(begin-tx "Compute D1")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let*
    (
        (initial:[decimal] [200.0 200.0 200.0])
        (d1:decimal
            (free.TEST.SSWP|UCC_ComputeD
                85.0 
                initial
            )
        )
        (d2:decimal
            (free.TEST.SSWP|UCC_ComputeD
                85.0 
                [
                    260.0
                    200.0
                    200.0
                ]
            )
        )
        (lp:decimal 10000000.0)
        (diff:decimal (- d2 d1))
        (lp-ideal:decimal (floor (/ (* lp diff) d1) 24))

        
        (sym-liquidity:[decimal] 
            (free.UTILS.SWP|UC_Liquidity
                60.0
                0
                24
                [
                    200.0
                    200.0
                    200.0
                ]
                [24 24 24]
            )
        )
        (with-symetric-liquidty:[decimal] (free.UTILS.UTILS|UC_AddHybridArray [[100.0 200.0 300.0] sym-liquidity]))

        (d-symetric:decimal (free.TEST.SSWP|UCC_ComputeD 85.0 with-symetric-liquidty))
        (diff2:decimal (- d-symetric d1))
        (penalty-factor:decimal (floor (/ diff diff2) 24))
        (lp-final:decimal (floor (* lp-ideal penalty-factor) 24))
    )
    [
        sym-liquidity 
        with-symetric-liquidty 
        d1 
        d2 
        d-symetric 
        diff 
        diff2 
        lp-ideal 
        penalty-factor
        lp-final
    ]
)
(print "==========================================")

;;compute LP Amount to be handed
(let*
    (
        (initial-a:decimal 2000.0)
        (initial-b:decimal 20000.0)
        (initial-c:decimal 2000.0)
        (initial:[decimal] [initial-a initial-b initial-c])

        (d0:decimal (free.TEST.SSWP|UCC_ComputeD 85.0 initial))
        (lp:decimal 10000000.0)
        (fee:decimal 0.01)    ;;1%
        (a:decimal 20.0)
        (b:decimal 200.0)
        (c:decimal 20.0)
        (actual-a:decimal (+ initial-a a))
        (actual-b:decimal (+ initial-b b))
        (actual-c:decimal (+ initial-c c))

        (new-values:[decimal] [actual-a actual-b actual-c])
        (d1:decimal (free.TEST.SSWP|UCC_ComputeD 85.0 new-values))

        (d-ratio:decimal (floor (/ d1 d0) 24))
        (ideal-a:decimal (floor (* initial-a d-ratio) 24))
        (ideal-b:decimal (floor (* initial-b d-ratio) 24))
        (ideal-c:decimal (floor (* initial-c d-ratio) 24))

        (a-diff:decimal (abs (- actual-a ideal-a)))
        (b-diff:decimal (abs (- actual-b ideal-b)))
        (c-diff:decimal (abs (- actual-c ideal-c)))

        (a-diff-fee:decimal (floor (* a-diff fee) 24))
        (b-diff-fee:decimal (floor (* b-diff fee) 24))
        (c-diff-fee:decimal (floor (* c-diff fee) 24))

        (adjusted-a:decimal (- actual-a a-diff-fee))
        (adjusted-b:decimal (- actual-b b-diff-fee))
        (adjusted-c:decimal (- actual-c c-diff-fee))
        (adjusted-values:[decimal] [adjusted-a adjusted-b adjusted-c])

        (d2:decimal (free.TEST.SSWP|UCC_ComputeD 85.0 adjusted-values))

        (v1:decimal (- d2 d0))
        (final-lp:decimal (floor (/ (* v1 lp) d0) 24))

    )
    [[d2 d0] v1 (* v1 lp)  final-lp]
)

;;compute LP amount to be handed with no penalty
(print "compute LP amount to be handed with no penalty")
(let*
    (
        (initial-a:decimal 2000.0)
        (initial-b:decimal 20000.0)
        (initial-c:decimal 2000.0)
        (initial:[decimal] [initial-a initial-b initial-c])

        (d0:decimal (free.TEST.SSWP|UCC_ComputeD 85.0 initial))
        (lp:decimal 10000000.0)
        (fee:decimal 0.01)    ;;0.25%
        (a:decimal 20.0)
        (b:decimal 200.0)
        (c:decimal 20.0)
        (initial-amount:decimal (+ (+ a b) c))

        (share-value:decimal (floor (/ d0 lp) 24))
        (ideal-shares:decimal (floor (/ initial-amount share-value) 24))
    )
    [d0 share-value ideal-shares]
)

(print "===========================")
(let*
    (
        (initial-a:decimal 200.0)
        (initial-b:decimal 400.0)
        (initial:[decimal] [initial-a initial-b])

        (d0:decimal (free.TEST.SSWP|UCC_ComputeD 85.0 initial))
        (lpw:decimal 0.1)
        (lpr:decimal (- 1.0 lpw))

        (d1:decimal (floor (* lpr d0) 24))
        (y:decimal (free.UTILS.SWP|UCC_ComputeYD 85.0 initial d1 0))

        (d3:decimal (free.TEST.SSWP|UCC_ComputeD 85.0 [y 400.0]))

        (by:decimal (floor (* lpw (at 0 initial)) 24))
    )

    [d0 d1 d3 y by]
)


(env-gas)
(commit-tx)






;82499.308365845512581303649233

    ;82499.308365845523|397120128828
    ;82499.308365845523|483992994197


 ;      0.000000000004157597263656

 ;0.000000000004157597263656
 ;0.000000000001881818555775
 ;0.000000000002569218728395

;82499.3                                 0.008365955235808001750589     going up until you hit negative
;82499.4                                -0.091635356144560510880607     is negative; go up with more precision
;82499.31                               -0.001634175907220075069758     still negative, go down with more precision
;82499.309                              -0.000634162792954691379353     still negative, go down with more precision
;82499.3089                             -0.000534161481543374407159


;;82499.3                                   0.008365955235808001750589     
;;          output: POS         => NXT: [> this value]                              => 82499.4
;;
;;82499.4                                  -0.091635356144560510880607
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.31
;;
;;82499.31                                 -0.001634175907220075069758
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.301
;;
;;82499.301                                 0.007365942121458975481599
;;          output: POS         => NXT: [> this value]                              => 82499.302
;;
;;82499.302                                 0.006365929007114356949647
;;          output: POS         => NXT: [> this value]                              => 82499.303
;;
;;82499.303                                 0.005365915892788803807043
;;          output: POS         => NXT: [> this value]                              => 82499.304
;;
;;82499.304                                 0.004365902778467658400801
;;          output: POS         => NXT: [> this value]                              => 82499.305
;;
;;82499.305                                 0.003365889664165578382876
;;          output: POS         => NXT: [> this value]                              => 82499.306
;;
;;82499.306                                 0.002365876549867906100637
;;          output: POS         => NXT: [> this value]                              => 82499.307
;;
;;82499.307                                 0.001365863435574641553923
;;          output: POS         => NXT: [> this value]                              => 82499.308
;;
;;82499.308                                 0.000365850321300442394158
;;          output: POS         => NXT: [> this value]                              => 82499.309
;;
;;82499.309                                -0.000634162792954691379353
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.3081
;;
;;82499.3081                                0.000265849009831417308383
;;          output: POS         => NXT: [> this value]                              => 82499.3082
;;
;;82499.3082                                0.000165847698406262678183
;;          output: POS         => NXT: [> this value]                              => 82499.3083
;;
;;82499.3083                                0.000065846386981005548812
;;          output: POS         => NXT: [> this value]                              => 82499.3084
;;
;;82499.3084                               -0.000034154924429696428219
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.30831
;;
;;82499.30831                               0.000055846255845803024184
;;          output: POS         => NXT: [> this value]                              => 82499.30832
;;
;;82499.30832                               0.000045846124710599474563
;;          output: POS         => NXT: [> this value]                              => 82499.30833
;;
;;82499.30833                               0.000035845993575394899948
;;          output: POS         => NXT: [> this value]                              => 82499.30834
;;
;;82499.30834                               0.000025845862440189300340
;;          output: POS         => NXT: [> this value]                              => 82499.30835
;;
;;82499.30835                               0.000015845731304982675738
;;          output: POS         => NXT: [> this value]                              => 82499.30836
;;
;;82499.30836                               0.000005845600169775026143
;;          output: POS         => NXT: [> this value]                              => 82499.30837
;;
;;82499.30837                              -0.000004154530965433648446
;;          output: NEG         => NXT: [< this value AND > last POS output value]  => 82499.308361
;;