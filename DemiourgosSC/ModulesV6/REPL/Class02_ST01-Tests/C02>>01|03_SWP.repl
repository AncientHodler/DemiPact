(print "")
(print "===================Initialise Ouronet_TX-002============================")
(begin-tx "INIT TX 000 - Chain Data Time SetUp Definition")
(namespace "free")
(env-chain-data
    {"prev-block-hash": "98c486052a5147fdd30fa43cc6d67e0a4e680c856c37f9157cb788cd67d58006",
     "block-time": TV.TIME00}
)
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-gas)
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;TX 001 -- Make 10 DWK
;;TX 002 -- Coil 5k DLK
;;TX 003 -- Move 50k OURO from ANHD to AOZ
;;TX 004 -- Issue W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51                         ;;pool1
;;Tx 005 -- Issue S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51                         ;;pool2
;;TX 006 -- Issue P|OURO-98c486052a51|PKOSON-98c486052a51                                       ;;pool3
;;TX 007 -- Issue S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51                 ;;pool4
;;TX 008 -- Issue P|OURO-98c486052a51|BUSD-98c486052a51                                         ;;pool5
;;TX 009 -- Mint 100 mil VST Origin
;;TX 010 -- Issue P|OURO-98c486052a51|VST-98c486052a51                                          ;;pool6
;;TX 011 -- Issue P|OURO-98c486052a51|BUSD-98c486052a51|TUSD-98c486052a51|VST-98c486052a51      ;;pool6a
;;TX 012a - Issue Stable 7xUSD      via defpact 0|2                                             ;;pool7
;;TX 012b -                         via defpact 1|2
;;TX 012c -                         via defpact 2|2                                             ;;pool8(below)
;;TX 013 -- Issue W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51
;;TX 014 -- Enable Pools Functionality
;:TX 015 -- Slippage Object Tests
;;TX 016 -- 4x Swaps
;;TX 017 -- 1x Swap with Slippage
;;TX 018 -- 1x Add Liq Max Cost
;;TX 019a - Add Standard Liquidity  via defpact 0|2
;;TX 019b -                         via defpact 1|2
;;TX 019c -                         via defpact 2|2
;;TX 020 -- Add Balanced Liqudity
;;TX 021 -- Worth Tests
;:TX 022 -- ORBR Fueling Tests
;;TX 023 -- Deploy Smart Account
;;TX 024 -- Reservation Tests
;;TX 025 -- Freeze and Repurpose Frozen
;:TX 026 -- Sleep & Repurpose Sleep
;;TX 027 -- Merge Repurpose Tests
;:TX 028 -- Vesting Tests
;:TX 029 -- Unvesting Tests
;:TX 030 -- Vested Ouro Transfer RoleTests
;:TX 031 -- Further Vesting Tests
;;TX 032 -- Enable Frozen and Sleeping LP for Pool
;:TX 033 -- Add Frozen & Sleeping Liquidity
;;TX 034a - Add Iced Liquidity      via defpact 0|2
;;TX 034b -                         via defpact 1|2
;;TX 034c -                         via defpact 2|2
;;TX 035a - Add Glacial Liquidity   via defpact 0|2
;;TX 035b -                         via defpact 1|2
;;TX 035c -                         via defpact 2|2
;;TX 036a - Add Sleeping Liqudity   via defpact 0|2
;;TX 036b -                         via defpact 1|2
;;TX 036c -                         via defpact 2|2
;;TX 037a - Add Frozen Liqudity     via defpact 0|2
;;TX 037b -                         via defpact 1|2
;;TX 037c -                         via defpact 2|2
;:TX 038 -- Add Iced Liquidity
;;TX 039 -- Add Glacial Liquidity
;;TX 040 -- Management Tests
;;TX 041 -- Issue BVST
;;TX 042 -- BVST Fee Withdrawal Testing
;;TX 043 -- Migration Testing
;;TX 044 -- Treasury Dispo Tests
;:TX 045 -- VSE and Swap Math Tests
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=============================================BEGIN SWP TESTS==========================================")
(begin-tx "SWP|TX 001 - Make 10k DWK")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263", 
          "caps": [
                    (coin.TRANSFER 
                    "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                    "c:fQ9KNZrn8rBUW7wWYoQ2SENoBiqDTCuH9mOd_6Ggdz4"
                    20000.0)
                  ]
        }
    ]
)

(let
    (
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
    )
    (ref-TS01-C2::LQD|C_WrapKadena KST.ANHD KST.ANHD 20000.0)
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 001 WrapKadena ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 002 - Coil 5k DLK")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)

        (dwk-id:string (ref-DALOS::UR_WrappedKadenaID))
        (dlk-id:string (ref-DALOS::UR_LiquidKadenaID))
        (ats-pairs-with-dlk-id:[string] (ref-DPTF::UR_RewardBearingToken dlk-id))
        (kdaliquindex:string (at 0 ats-pairs-with-dlk-id))
    )
    (ref-TS01-C2::ATS|C_Coil
        KST.ANHD
        KST.ANHD
        kdaliquindex
        dwk-id
        10000.0
    )
    [
        (format "AH has {} DWK" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_WrappedKadenaID) KST.ANHD)])
        (format "AH has {} DLK" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_LiquidKadenaID) KST.ANHD)])
        (format "AH has {} GAS" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_IgnisID) KST.ANHD)])
        (format "AH Elite is {}" [(ref-DALOS::UR_Elite KST.ANHD)])
        (format "AH Elite Auryn is {}" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_EliteAurynID) KST.ANHD)])
        (format "AH Vested Elite Auryn is {}" [(ref-DPMF::UR_AccountSupply (ref-DPTF::UR_Vesting (ref-DALOS::UR_EliteAurynID)) KST.ANHD)])
    ]
    
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 002 Coil DWK ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=================================AOZ-SECTION============================================")
(begin-tx "SWP|TX 003 - Move 50k OURO from ANHD to AOZ")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
    )
    (ref-TS01-C1::DPTF|C_Transfer 
        KST.ANHD
        "OURO-98c486052a51"
        KST.ANHD
        KST.AOZT
        50000.0
        false
    )
)
    
(print "")
(print "")
(format "<<<<<<<SWP|TX 003 Transfer 50k OURO ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 04 - Issue W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.ANHD
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (pool
                (ref-TS01-C2::SWP|C_IssueWeighted
                    KST.ANHD
                    KST.ANHD
                    [
                        { "token-id":  (ref-DALOS::UR_LiquidKadenaID), "token-supply": 3200.0}
                        { "token-id":  (ref-DALOS::UR_OuroborosID), "token-supply": 10000.0}
                        { "token-id":  (ref-DALOS::UR_WrappedKadenaID), "token-supply": 6000.0}
                    ]
                    5.0
                    [0.3 0.5 0.2]
                    true
                )
            )
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [pool])
    )
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 004 Issue W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 005 - Issue S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.ANHD
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (t1:string (ref-DALOS::UR_LiquidKadenaID))
            (t2:string (ref-DALOS::UR_OuroborosID))
            (t3:string (ref-DALOS::UR_WrappedKadenaID))
            (t1a:decimal 800.0)
            (t2a:decimal 900.0)
            (t3a:decimal 850.0)
            (pool
                (ref-TS01-C2::SWP|C_IssueStable
                    KST.ANHD
                    KST.ANHD
                    [
                        { "token-id":  t1, "token-supply": t1a}
                        { "token-id":  t2, "token-supply": t2a}
                        { "token-id":  t3, "token-supply": t3a}
                    ]
                    10.0
                    85.0
                    false
                )
            )
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [pool])
    )
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 005 Issue S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 006 - Issue P|OURO-98c486052a51|PKOSON-98c486052a51")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AOZ", "caps": [] }
    ]
)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.AOZT
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AOZ", "caps": [] }
            { "key": "95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (pool
                (ref-TS01-C2::SWP|C_IssueStandard
                    KST.AOZT
                    KST.AOZT
                    [
                        { "token-id":  "OURO-98c486052a51", "token-supply": 2500.0}
                        { "token-id":  "PKOSON-98c486052a51", "token-supply": 10000.0}
                    ]
                    25.0
                    false
                )
            )
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [pool])
    )
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 006 Issue P|OURO-98c486052a51|PKOSON-98c486052a51 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 007 - Issue S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AOZ", "caps": [] }
    ]
)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.AOZT
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AOZ", "caps": [] }
            { "key": "95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:95a59029029524ebb250b2fafe6826ff88bb59c527d661cba3279d09a51d3bdf" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (pool
                (ref-TS01-C2::SWP|C_IssueStable
                    KST.AOZT
                    KST.AOZT
                    [
                        { "token-id":  "PKOSON-98c486052a51", "token-supply": 10000.0}
                        { "token-id":  "EKOSON-98c486052a51", "token-supply": 10000.0}
                        { "token-id":  "AKOSON-98c486052a51", "token-supply": 10000.0}
                    ]
                    5.0
                    85.0
                    false
                )
            )
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [pool])
    )
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 007 Issue S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 008 - Issue P|OURO-98c486052a51|BUSD-98c486052a51")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.ANHD
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (pool
                (ref-TS01-C2::SWP|C_IssueStandard
                    KST.ANHD
                    KST.ANHD
                    [
                        { "token-id":  "OURO-98c486052a51", "token-supply": 2500.0}
                        { "token-id":  "BUSD-98c486052a51", "token-supply": 10000.0}
                    ]
                    25.0
                    false
                )
            )
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [pool])
    )
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 008 Issue P|OURO-98c486052a51|BUSD-98c486052a51 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 009 - Mint 100 mil VST Origin")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (vst:string "VST-98c486052a51")
        (patron:string KST.ANHD)
    )
    ;;Mint 100 mil VST
    (ref-TS01-C1::DPTF|C_Mint patron vst patron 200000000.0 true)
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 009 Origin MInt VST ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 010 - Issue P|OURO-98c486052a51|VST-98c486052a51")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.ANHD
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (pool
                (ref-TS01-C2::SWP|C_IssueStandard
                    KST.ANHD
                    KST.ANHD
                    [
                        { "token-id":  "OURO-98c486052a51", "token-supply": 2500.0}
                        { "token-id":  "VST-98c486052a51", "token-supply": 50000000.0}
                    ]
                    25.0
                    false
                )
            )
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [pool])
    )
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 010 Issue P|OURO-98c486052a51|VST-98c486052a51 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 011 - Issue P|OURO-98c486052a51|BUSD-98c486052a51|TUSD-98c486052a51|VST-98c486052a51")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.ANHD
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (pool
                (ref-TS01-C2::SWP|C_IssueStandard
                    KST.ANHD
                    KST.ANHD
                    [
                        { "token-id":  "OURO-98c486052a51", "token-supply": 5000.0}
                        { "token-id":  "BUSD-98c486052a51", "token-supply": 10000.0}
                        { "token-id":  "TUSD-98c486052a51", "token-supply": 20000.0}
                        { "token-id":  "VST-98c486052a51", "token-supply": 400000.0}
                    ]
                    50.0
                    false
                )
            )
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [pool])
    )
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 011 Issue P|OURO-98c486052a51|BUSD-98c486052a51|TUSD-98c486052a51|VST-98c486052a51 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 012a - Issue Stable 7xUSD via defpact 0|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-TS01-CP:module{TalosStageOne_ClientPactsV3} TS01-CP)
        (patron:string KST.ANHD)
        (pool-tokens:[object{SwapperV4.PoolTokens}]
            [
                ;{ "token-id":  "OURO-98c486052a51", "token-supply": 1000.0}
                { "token-id":  "BUSD-98c486052a51", "token-supply": 1000000.0}
                { "token-id":  "TUSD-98c486052a51", "token-supply": 1000000.0}
                { "token-id":  "USDT-98c486052a51", "token-supply": 1000000.0}
                { "token-id":  "USDC-98c486052a51", "token-supply": 1000000.0}
                { "token-id":  "USDD-98c486052a51", "token-supply": 1000000.0}
                { "token-id":  "AUSD-98c486052a51", "token-supply": 1000000.0}
                { "token-id":  "CUSD-98c486052a51", "token-supply": 1000000.0}
            ]
        )
        (fee-lp:decimal 10.0)
        (weights:[decimal] (make-list (length pool-tokens) 1.0))
        (w-weigths:[decimal] [0.1 0.1 0.1 0.1 0.2 0.2 0.2 ])
        (amp:decimal 85.0)
        (p:bool false)
    )
    ;(ref-TS01-CP::SWP|C_IssueStablePool
    ;    patron
    ;    patron
    ;    pool-tokens
    ;    fee-lp
    ;    amp
    ;    p
    ;)
    ;(ref-TS01-CP::SWP|C_IssueWeightedPool
    ;    patron
    ;    patron
    ;    pool-tokens
    ;    fee-lp
    ;    w-weigths
    ;    p
    ;)
    ;(ref-TS01-CP::SWP|C_IssueStandardPool
    ;    patron
    ;    patron
    ;    pool-tokens
    ;    fee-lp
    ;    ;amp
    ;    p
    ;)
    
    [
        (format "AH has {} GAS" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_IgnisID) KST.ANHD)])
        (ref-TS01-CP::SWP|C_IssueStablePool
            patron
            patron
            pool-tokens
            fee-lp
            amp
            p
        )
        (pact-state)
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 012a Issue Stable 7xUSD STEP 0|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 012b - Issue Stable 7xUSD via defpact 1|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.ANHD
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (continue-pact 1 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 012b Issue Stable 7xUSD STEP 1|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 012c - Issue Stable 7xUSD via defpact 2|2")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(namespace "free")
(env-sigs
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 2 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")

(print "")
(print "")
(format "<<<<<<<SWP|TX 012c Issue Stable 7xUSD STEP 2|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 013 - Issue W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                KST.ANHD
                (+ (ref-DALOS::UR_UsagePrice "dptf") (ref-DALOS::UR_UsagePrice "swp"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (pool
                (ref-TS01-C2::SWP|C_IssueWeighted
                    KST.ANHD
                    KST.ANHD
                    [
                        { "token-id":  "OURO-98c486052a51", "token-supply": 1000000.0}
                        { "token-id":  "TEUR-98c486052a51", "token-supply": 1000000.0}
                        { "token-id":  "EURT-98c486052a51", "token-supply": 1000000.0}
                        { "token-id":  "EURC-98c486052a51", "token-supply": 1000000.0}
                        { "token-id":  "EURD-98c486052a51", "token-supply": 1000000.0}
                        { "token-id":  "AEUR-98c486052a51", "token-supply": 1000000.0}
                        { "token-id":  "CEUR-98c486052a51", "token-supply": 1000000.0}
                    ]
                    5.0
                    [0.1429 0.1429 0.1429 0.1429 0.1428 0.1428 0.1428]
                    true
                )
            )
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [pool])
    )
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 013 Issue W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;Issued Pools
;;
;;      W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51
;;      S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51
;;      P|OURO-98c486052a51|PKOSON-98c486052a51
;;      S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51
;;      P|OURO-98c486052a51|BUSD-98c486052a51
;;      P|OURO-98c486052a51|VST-98c486052a51
;;      P|OURO-98c486052a51|BUSD-98c486052a51|TUSD-98c486052a51|VST-98c486052a51
;;      S|BUSD-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51
;;      W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 014 - Enable Pools Functionality")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
    ]
)
(let
    (
        (ref-TS01-A:module{TalosStageOne_AdminV4} TS01-A)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (pool1:string "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (pool2:string "S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (pool3:string "P|OURO-98c486052a51|PKOSON-98c486052a51")
        (pool4:string "S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51")
        (pool5:string "P|OURO-98c486052a51|BUSD-98c486052a51")
        (pool6:string "P|OURO-98c486052a51|VST-98c486052a51")
        (pool6a:string "P|OURO-98c486052a51|BUSD-98c486052a51|TUSD-98c486052a51|VST-98c486052a51")
        (pool7:string "S|BUSD-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        (spt1:[object{SwapperV4.FeeSplit}]
            [
                {"target":KST.BYTA, "value":15}
                ;{"target":KST.LUMY, "value":125}
                ;{"target":KST.COCA, "value":35}
                ;{"target":KST.KISS, "value":35}
                ;{"target":KST.PLCS, "value":50}
                ;{"target":KST.NANI, "value":60}
                ;{"target":KST.AOZT, "value":10}
            ]
        )
        (spt2:[object{SwapperV4.FeeSplit}]
            [
                {"target":KST.BYTA, "value":15}
                {"target":KST.LUMY, "value":125}
                {"target":KST.COCA, "value":35}
                {"target":KST.KISS, "value":35}
                ;{"target":KST.PLCS, "value":50}
                ;{"target":KST.NANI, "value":60}
                ;{"target":KST.AOZT, "value":10}
            ]
        )
    )
    ;;Add Special Fee
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool1 20.0 false)
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool2 20.0 false)
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool3 20.0 false)
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool4 20.0 false)
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool5 20.0 false)
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool6 20.0 false)
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool6a 50.0 false)
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool7 20.0 false)
    (ref-TS01-C2::SWP|C_UpdateFee KST.ANHD pool8 20.0 false)
    ;;Add Fee Targets
    (ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool1 spt2)
    (ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool2 spt2)
    (ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool3 spt1)
    (ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool4 spt1)
    ;(ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool5 spt2)
    (ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool6 spt2)
    (ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool6a spt2)
    (ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool7 spt2)
    (ref-TS01-C2::SWP|C_UpdateSpecialFeeTargets KST.ANHD pool8 spt2)
    ;;Enable Asymetric Liquidity Addition and Primordial Pool
    (ref-TS01-A::SWP|A_DefinePrimordialPool pool1)
    (ref-TS01-A::SWP|A_ToggleAsymetricLiquidityAddition true)
    ;;Toggle Add Liquidity
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool1 true)
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool2 true)
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool3 true)
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool4 true)
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool5 true)
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool6 true)
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool6a true)
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool7 true)
    (ref-TS01-C2::SWP|C_ToggleAddLiquidity KST.ANHD pool8 true)
    ;;Toggle Swap Functionality
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool1 true)
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool2 true)
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool3 true)
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool4 true)
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool5 true)
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool6 true)
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool6a true)
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool7 true)
    (ref-TS01-C2::SWP|C_ToggleSwapCapability KST.ANHD pool8 true)
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 014 Enable Pools Functionality ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 015 - Slippage Object Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-U|SWP:module{UtilitySwpV2} U|SWP)
        (ref-SWPU:module{SwapperUsageV4} SWPU)
        (ref-SWPI:module{SwapperIssueV2} SWPI)
        (patron:string KST.ANHD)
        (pool1:string "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (pool2:string "S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (pool3:string "P|OURO-98c486052a51|PKOSON-98c486052a51")
        (pool4:string "S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51")
        (pool5:string "P|OURO-98c486052a51|BUSD-98c486052a51")
        (pool6:string "P|OURO-98c486052a51|VST-98c486052a51")
        (pool7:string "S|BUSD-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        ;;
        (input-ids:[string]
            ["TEUR-98c486052a51" "EURT-98c486052a51" "EURC-98c486052a51" "EURD-98c486052a51" "AEUR-98c486052a51" "CEUR-98c486052a51"]
        )
        (input-amounts:[decimal]
            [230.0 240.0 232.0 223.0 455.0 432.0]
        )

        (input-ids-s:[string]
            ["EURT-98c486052a51"]
        )
        (input-amounts-s:[decimal]
            [2400.0]
        )

        (output-id:string "OURO-98c486052a51")
        (slippage-value:decimal 5.0)

        (slippage-obj:object{SwapperUsageV4.Slippage}
            (ref-SWPU::UDC_SlippageObject 
                pool8 
                (ref-U|SWP::UDC_DirectSwapInputData input-ids input-amounts output-id) 
                slippage-value
            )
        )

        (slippage-obj-s:object{SwapperUsageV4.Slippage}
            (ref-SWPU::UDC_SlippageObject 
                pool8
                (ref-U|SWP::UDC_DirectSwapInputData input-ids-s input-amounts-s output-id)
                slippage-value
            )
        )
    )
    [
        (format "Slippage-Obj is {}" [slippage-obj])
        (format "Min-Max is {}" [(ref-SWPU::UC_SlippageMinMax slippage-obj)])

        (format "Slippage-Obj Simple is {}" [slippage-obj-s])
        (format "Min-Max Simple is {}" [(ref-SWPU::UC_SlippageMinMax slippage-obj-s)])
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 015 Slippage Object Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 016 - 4x Swaps")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
    )
    ;;134k
    (ref-TS01-C2::SWP|C_MultiSwapWithSlippage
        KST.ANHD 
        KST.ANHD
        "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51"
        ["TEUR-98c486052a51" "EURT-98c486052a51" "EURC-98c486052a51" "EURD-98c486052a51" "AEUR-98c486052a51" "CEUR-98c486052a51"]
        [230.0 240.0 232.0 223.0 455.0 432.0]
        "OURO-98c486052a51"
        5.0
    )
    ;;129k
    (ref-TS01-C2::SWP|C_MultiSwapNoSlippage
        KST.ANHD 
        KST.ANHD
        "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51"
        ["TEUR-98c486052a51" "EURT-98c486052a51" "EURC-98c486052a51" "EURD-98c486052a51" "AEUR-98c486052a51" "CEUR-98c486052a51"]
        [230.0 240.0 232.0 223.0 455.0 432.0]
        "OURO-98c486052a51"
    )

    ;84k
    (ref-TS01-C2::SWP|C_SingleSwapWithSlippage
        KST.ANHD 
        KST.ANHD
        "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51"
        "EURT-98c486052a51"
        2400.0
        "OURO-98c486052a51"
        5.0
    )
    ;;81k
    (ref-TS01-C2::SWP|C_SingleSwapNoSlippage
        KST.ANHD 
        KST.ANHD
        "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51"
        "EURT-98c486052a51"
        2400.0
        "OURO-98c486052a51"
    )
    (ref-TS01-C2::SWP|C_SingleSwapNoSlippage
        KST.ANHD 
        KST.ANHD
        "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51"
        "OURO-98c486052a51"
        2.0
        "DWK-98c486052a51"
    )
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 016 - 4x Swaps ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 017 - 1x Swap with Slippage")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
    )
    [
        (ref-TS01-C2::SWP|C_MultiSwapWithSlippage
            KST.ANHD 
            KST.ANHD
            "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51"
            ["TEUR-98c486052a51" "EURT-98c486052a51" "EURC-98c486052a51" "EURD-98c486052a51" "AEUR-98c486052a51" "CEUR-98c486052a51"]
            [230.0 240.0 232.0 223.0 455.0 432.0]
            "OURO-98c486052a51"
            5.0
        )
        (format "AH has {} GAS" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_IgnisID) KST.ANHD)])
    ]
    
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 017 1x Swap with Slippage ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 018 1x Add Liq Max Cost")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)
(acquire-module-admin free.SWPL)
(let
    (
        ;(ref-DALOS:module{OuronetDalosV4} DALOS)
        ;(ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-SWPL:module{SwapperLiquidity} SWPL)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        ;(ref-SWP:module{SwapperV4} SWP)
        ;(swp-sc:string (ref-DALOS::GOV|SWP|SC_NAME))
        (patron:string KST.ANHD)
        ;(pool1:string "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        ;(pool2:string "S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        ;(pool3:string "P|OURO-98c486052a51|PKOSON-98c486052a51")
        ;(pool4:string "S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51")
        (pool5:string "P|OURO-98c486052a51|BUSD-98c486052a51")
        ;(pool6:string "P|OURO-98c486052a51|VST-98c486052a51")
        ;(pool7:string "S|BUSD-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        ;(pool7:string "P|OURO-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        ;(pool7:string "W|OURO-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        (ia:[decimal] [730.0 250.0 330.0 450.0 554.0 332.0 0.0])
        (ia2:[decimal] [200.0 0.0])
        ;(pool8-lp:string (ref-SWP::UR_TokenLP pool8))
        ;(ld:object{SwapperLiquidity.LiquidityData}
        ;    (ref-SWPL::URC_Liquidity pool8 ia)
        ;)
        ;(clad:object{SwapperLiquidity.CompleteLiquidityAdditionData}
        ;    (ref-SWPL::URC|KDA-PID_CompleteLiquidityAdditionData patron pool8 ld true true 1.0)
        ;)
        ;(ico1:object{OuronetDalosV4.OutputCumulatorV2}
        ;    (with-capability (free.SWPL.SWPL|C>ADD-STANDARD-LQ pool8 ld)
        ;        (ref-SWPL::X|KDA-PID_AddLiqudityV2 patron pool8 true true 1.0 ld clad)
        ;    )
        ;)
    )
    [
        ;ld
        ;clad
        (ref-TS01-C2::SWP|C_AddLiquidity
            patron
            patron
            pool8
            ia
        )
        (ref-TS01-C2::SWP|C_AddLiquidity
            patron
            patron
            pool5
            ia2
        )
        ;(format "AH has {} GAS" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_IgnisID) KST.ANHD)])
        ;(format "Pool8 LP is {}" [pool8-lp])
        ;(format "Burn role for LP on SWP-SC is {}" [(ref-DPTF::UR_AccountRoleBurn pool8-lp swp-sc)])
        ;(format "Mint role for LP on SWP-SC is {}" [(ref-DPTF::UR_AccountRoleMint pool8-lp swp-sc)])
        ;(format "Pool8-LP Owner is {}" [(ref-DPTF::UR_Konto pool8-lp)])
    ]
    
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 018 1x Add Liq Max Cost ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 019a - Add Standard Liquidity 0|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-CP:module{TalosStageOne_ClientPactsV3} TS01-CP)
        (patron:string KST.ANHD)
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        (ia:[decimal] [730.0 250.0 330.0 450.0 554.0 332.0 0.0])
        (liq-info:object{OuronetInfoV2.ClientInfo} 
            (free.INFO-ONE.SWP|INFO_AddLiquidity
                patron patron pool8 ia 1.0
            )
        )
    )
    [
        (ref-TS01-CP::SWP|C_AddStandardLiquidity
            patron
            patron
            pool8
            ia
        )
        ;(format "LQ INFO STANDARD LIQ IZ {}" [liq-info])
        ;(pact-state)
    ]
    
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 019a - Add Standard Liquidity 0|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 019b - Add Standard Liquidity 1|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 1 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 019b - Add Standard Liquidity 1|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;+++++++++++++
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 019c - Add Standard Liquidity 2|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 2 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 019c - Add Standard Liquidity 2|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 020 - Add Balanced Liqudity")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-SWPL:module{SwapperLiquidity} SWPL)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (patron:string KST.ANHD)
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        ;;
        (bl:[decimal] (ref-SWPL::URC_BalancedLiquidity pool8 "OURO-98c486052a51" 500.0 true))
        ;(bl-lq:object{SwapperLiquidity.LiquidityData} (ref-SWPL::URC_Liquidity pool8 bl))
        (bl-sorted:object{SwapperLiquidity.LiquiditySplit} (ref-SWPL::URC_SortLiquidity pool8 bl))
        ;(pool1:string "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        ;(pool2:string "S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        ;(pool3:string "P|OURO-98c486052a51|PKOSON-98c486052a51")
        ;(pool4:string "S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51")
        ;(pool5:string "P|OURO-98c486052a51|BUSD-98c486052a51")
        ;(pool6:string "P|OURO-98c486052a51|VST-98c486052a51")
        ;(pool7:string "S|BUSD-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        ;(pool7:string "P|OURO-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        ;(pool7:string "W|OURO-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        ;(ld:object{SwapperLiquidity.LiquidityData}
        ;    (ref-SWPL::URC_LD pool8 bl)
        ;)
        ;(clad:object{SwapperLiquidity.CompleteLiquidityAdditionData}
        ;    (ref-SWPL::URC|KDA-PID_CLAD patron pool8 ld true true 1.0)
        ;)
        
    )
    [
        
        ;(format "Balance Lq with 500 OURO is {}" [bl])
        ;(format "BL sorted is {}" [bl-sorted])
    ]
    [
        ;(format "LD is {}" [ld])
        ;(format "CLAD is {}" [clad])
        (format "Balanced Liquidity with 500 OURO is{}, and adding liquidity so creates {} LP Tokens" 
            [
                bl
                (ref-TS01-C2::SWP|C_AddLiquidity
                    patron
                    patron
                    pool8
                    bl
                )
            ]
        )
        (format "AH has {} GAS" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_IgnisID) patron)])
    ]
    
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 020 Add Balanced Liquidity ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 021 - Worth Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-ATS:module{AutostakeV4} ATS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-SWPI:module{SwapperIssueV2} SWPI)
        (pool1:string "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (pool2:string "S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (pool3:string "P|OURO-98c486052a51|PKOSON-98c486052a51")
        (pool4:string "S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51")
        (pool5:string "P|OURO-98c486052a51|BUSD-98c486052a51")
        (pool6:string "P|OURO-98c486052a51|VST-98c486052a51")

        (pool7:string "S|BUSD-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        ;(pool7:string "P|OURO-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")
        ;(pool7:string "W|OURO-98c486052a51|TUSD-98c486052a51|USDT-98c486052a51|USDC-98c486052a51|USDD-98c486052a51|AUSD-98c486052a51|CUSD-98c486052a51")

        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")

        (pts:[decimal] (ref-SWP::UR_PoolTokenSupplies pool1))
        (dlk-amount:decimal (at 0 pts))
        (dlk-amount-is-worth:decimal (ref-SWPI::URC_WorthDWK "DLK-98c486052a51" dlk-amount))

        (dlk-id:string (ref-DALOS::UR_LiquidKadenaID))
        (ats-pairs-with-dlk-id:[string] (ref-DPTF::UR_RewardBearingToken dlk-id))
        (kdaliquindex:string (at 0 ats-pairs-with-dlk-id))
        (index-value:decimal (ref-ATS::URC_Index kdaliquindex))

    )
    [
        (format "DLK in first pool is {}" [dlk-amount])
        (format "This amount is worth {} DWK" [dlk-amount-is-worth])
        (format "Because KDA-Liquid-Index is {}" [index-value])

        (format "OURO-98c486052a51 is worth {} DWK" [(ref-SWPI::URC_SingleWorthDWK "OURO-98c486052a51")])
        (format "Pool 1 is worth {} DWK" [(at 0 (ref-SWPI::URC_PoolValue pool1))])
        (format "Pool 2 is worth {} DWK" [(at 0 (ref-SWPI::URC_PoolValue pool2))])
        (format "Pool 3 is worth {} DWK" [(at 0 (ref-SWPI::URC_PoolValue pool3))])
        (format "Pool 4 is worth {} DWK" [(at 0 (ref-SWPI::URC_PoolValue pool4))])
        (format "Pool 5 is worth {} DWK" [(at 0 (ref-SWPI::URC_PoolValue pool5))])
        (format "Pool 6 is worth {} DWK" [(at 0 (ref-SWPI::URC_PoolValue pool6))])
        (format "Pool 7 is worth {} DWK" [(at 0 (ref-SWPI::URC_PoolValue pool7))])
        (format "Pool 8 is worth {} DWK" [(at 0 (ref-SWPI::URC_PoolValue pool8))])
        (format "AH has {} GAS" [(ref-DPTF::UR_AccountSupply (ref-DALOS::UR_IgnisID) KST.ANHD)])
    ]
    
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 021 - Worth Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 022 - ORBR Fueling Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-ORBR:module{OuroborosV4} OUROBOROS)
        (ref-TS01-A:module{TalosStageOne_AdminV4} TS01-A)
        (indices:[decimal] (ref-ORBR::URC_ProjectedKdaLiquindex))
    )
    [
        (format "Current Liquindex is {}, Projected Liquindex is" [(at 0 indices) (at 1 indices)])
    ]
    (ref-TS01-A::ORBR|A_Fuel)
    (let
        (
            (ref-DALOS:module{OuronetDalosV4} DALOS)
            (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
            (ref-ATS:module{AutostakeV4} ATS)

            (dlk-id:string (ref-DALOS::UR_LiquidKadenaID))
            (ats-pairs-with-dlk-id:[string] (ref-DPTF::UR_RewardBearingToken dlk-id))
            (kdaliquindex:string (at 0 ats-pairs-with-dlk-id))
            (index-value:decimal (ref-ATS::URC_Index kdaliquindex))
        )
        [
            (format "Initial Liquindex is {}, Projected Liquindex is {}, from {} KDA to be used for fueling" [(at 0 indices) (at 1 indices) (at 2 indices)])
            (format "After Manual Fuel, Current Liquindex is {}" [index-value])
        ]
    )
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 022 - ORBR Fueling Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Resereve Tests=================================")
(begin-tx "SWP|TX 023 - Deploy Smart Account")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(let
    (
        (ref-coin:module{fungible-v2} coin)
        (ref-U|CT:module{OuronetConstants} U|CT)
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (patron:string KST.ANHD)
        
        (nsuse:string (ref-U|CT::CT_NS_USE))
        (ah-ouronet-account:string "Σ.éXødVțrřĄθ7ΛдUŒjeßćιiXTПЗÚĞqŸœÈэαLżØôćmч₱ęãΛě$êůáØCЗшõyĂźςÜãθΘзШË¥şEÈnxΞЗÚÏÛjDVЪжγÏŽнăъçùαìrпцДЖöŃȘâÿřh£1vĎO£κнβдłпČлÿáZiĐą8ÊHÂßĎЩmEBцÄĎвЙßÌ5Ï7ĘŘùrÑckeñëδšПχÌàî")
        (ah-key (+ nsuse ".dh_ah-keyset"))
        (ah-kda:string "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263")
        (ah-pbl:string "9G.CgcAjiI89ICnk45mxx63hwkBe5G71sIqfEta0ugkzF7EB6cy55BtzlFa27jDGE7Kn7ChljCmkcIsrDw9JwzJECieGLB5Jlkz9Blo6iJct6uxIA1u64Hr7HKa93EAiCwJJBBKAojJtwupEsvspH1jjGxKyFsb8fbfnJm1rAKxcIzcFILmmdHFaICfFpnbJG6tJu0HM9JCJ7MBCE7C2LiqvE6Fc1hqCeAdGHxDp7sGquI0wl2l08aa6wlKvwu44jgqF8mqDnCyjpxHuttEqjs4h9IJ28kmB53ppwoznt16rjzeMl21n3rwfI2es56rp5xavCabDacyCuonniz72L5d7dq3ptIEiuggEyLIIGe9sadH6eaMyitcmKaH7orgFz6d9kL9FKorBr06owFg328wFhCIlCFpwIzokmo47xKKt5kBzhyodBAjhCqayuHBue4oDhoA21A2H9ut9gApMuxokcmsi7Bd1kitrfJAy1GkrGiBK5dvlhgshcnGaG3vhkCm6dI5idCGjDEodivvDbgyI6zaajHvIMdBtrGvuKnxvsBulkbaDbk2wIdKwrK")
        (balance:decimal (ref-coin::get-balance "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263"))

        ;;
        (cip:string "Ѻ.þódýSå∇θœŻθäЮânΦěÂCÉΛŠĚыćжŃУфÑíтσÈŸüÓÿÂи₳áìĚàŘhÃѺuΔuțŒЭěвžsÊ¢tWÛěbtõ₿1LΔмëøÆŚøξѺŮŤÒÚτцoDêžńęQvNTжÚž∇9ÂKуŞşи0ΛкДżεŽбÎбεÀÆãчvĚЫбçrЭKãwÿŽΨáÕЦê1мòğćZЮĞÉø1Î$mДMѺπďRЫ")
        (cip-pbl:string "9F.8Kd1nxv7iFyoF0L8mIBMFEri4aMGKcwHhd2LrzgeiCHleps2u0BC0dt3sMtLA6bne216JHGsfoq3pM19vjGswBDavbg4FBI39FhjuDqMlk8K1ahlKH8nbEDhybBwKKGstgthzGahbaH6rdnwk777gkhmmy4qejrIfelLHj8BE9wtxGbEoEyFpJdgkn2DofM9m1Ja98v69i59KuAHyuh6uJAxFelfaxp5JkJ06ElMJlIlAzjuz1nu4DmpIG0mtK5okFomLkvulr3w5EtrJpn4tsJpaMHK0fHJf4KDj8zplDtBfk87CewJ7ebw17KCj099Ha0jMErID2GwjgtpDI5tjljiCfeGq6J4bnw5j3gB7ACb4oxe3e6joHCgqwlp7q7aqpDmdnkkKfgguojmLi4rpkcJyJxwjeqqakqilgpBegI1rv3Dlvns9eieCKttaIH1Iuyn4JBpEhqxy79KojsLtvuAnb6seuF2MMp06g2e2inI0f1hBFIpf5g2pLequ143vbb6KFrwAr1tMk7FmjEDki3GKHB8qA9cAIHeAtirxqlaxH3CyKwFj4v5Ma0")


        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                ah-ouronet-account
                (+ (ref-DALOS::UR_UsagePrice "standard") (ref-DALOS::UR_UsagePrice "smart"))
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (ref-TS01-C1::DALOS|C_DeploySmartAccount
        ah-ouronet-account
        (keyset-ref-guard ah-key) 
        ah-kda 
        patron 
        ah-pbl
    )
    (ref-TS01-C1::DALOS|C_DeployStandardAccount
        cip
        (keyset-ref-guard ah-key) 
        ah-kda 
        cip-pbl
    )
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 023 - Deploy Smart Account ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 024 - Reservation Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-TFT:module{TrueFungibleTransferV7} TFT)
        (ref-VST:module{VestingV4} VST)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (OuroID:string (ref-DALOS::UR_OuroborosID))
        (IgnisID:string (ref-DALOS::UR_IgnisID))
        (ROuroID:string (ref-DPTF::UR_Reservation OuroID))
        (patron:string KST.ANHD)
        (smart-patron:string "Σ.éXødVțrřĄθ7ΛдUŒjeßćιiXTПЗÚĞqŸœÈэαLżØôćmч₱ęãΛě$êůáØCЗшõyĂźςÜãθΘзШË¥şEÈnxΞЗÚÏÛjDVЪжγÏŽнăъçùαìrпцДЖöŃȘâÿřh£1vĎO£κнβдłпČлÿáZiĐą8ÊHÂßĎЩmEBцÄĎвЙßÌ5Ï7ĘŘùrÑckeñëδšПχÌàî")
        (emma:string KST.EMMA)
    )
    ;;Turn ON Reserve Functionality
    (ref-TS01-C1::DPTF|C_ToggleReservation patron OuroID true)
    ;;Standard Account makes 15 R|Ouro
    (ref-TS01-C2::VST|C_Reserve patron patron OuroID 15.0)
    (let
        (
            (r-dptf-balance:decimal (ref-DPTF::UR_AccountSupply ROuroID patron))
        )
        ;;Deploy Account for ROuroID on Smart-Patron
        (ref-TS01-C1::DPTF|C_DeployAccount patron ROuroID smart-patron)
        ;;Transfer Role set to true to Smart Account.
        (ref-TS01-C1::DPTF|C_ToggleTransferRole patron ROuroID smart-patron true)
        ;;Send 15 R|Ouro to Smart Account
        (ref-TS01-C1::DPTF|C_Transfer patron ROuroID patron smart-patron 15.0 true)
        ;;Smart Account unreserves 10 Ouro
        (ref-TS01-C2::VST|C_Unreserve patron smart-patron ROuroID 10.0)

        ;;
        ;(ref-TS01-C2::VST|C_RepurposeReserved patron ROuroID patron emma)
        (let
            (
                (r2-dptf-balance:decimal (ref-DPTF::UR_AccountSupply ROuroID smart-patron))
                (r3-dptf-balance:decimal (ref-DPTF::UR_AccountSupply OuroID smart-patron))
            )
            ;;Show R|Ouro Balances, after reserve and after unreserve
            [
                (format "AH Standard has {} Reserved Ouro after first reservation" [r-dptf-balance])
                (format "AH Smart has {} Reserved Ouro after unreserve action" [r2-dptf-balance])
                (format "AH Smart has {} Ouro after unreserve action" [r3-dptf-balance])
                ;(format "Emma has {} {} after repurpose"[(ref-DPTF::UR_AccountSupply ROuroID emma) ROuroID])
            ]
        )
    )
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 024 - Reservation Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 025 - Freeze & Repurpose Frozen")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-VST:module{VestingV4} VST)
        (vst:string "VST-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (f-vst:string (ref-DPTF::UR_Frozen vst))
        
    )
    ;;Mint 1000 VST
    ;(ref-TS01-C1::DPTF|C_Mint patron vst patron 100000000.0 false)
    ;;Freeze 500 VST to Emma
    (ref-TS01-C2::VST|C_Freeze patron patron emma vst 10000000.0)
    ;;Show Emmas Balance
    ;(format "Emma has {} {}"[(ref-DPTF::UR_AccountSupply f-vst emma) f-vst])
    ;;Repurpose frozen Token back to AH
    (ref-TS01-C2::VST|C_RepurposeFrozen patron f-vst emma patron)
    ;(ref-VST::XI_RepurposeTrueFungible patron f-vst emma patron true)
    ;;Show AH Balance
    (format "AH has {} {} after repurpose"[(ref-DPTF::UR_AccountSupply f-vst patron) f-vst])
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 025 - Freeze & Repurpose Frozen ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 026 - Sleep & Repurpose Sleep")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-VST:module{VestingV4} VST)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (vst:string "VST-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (s-vst:string (ref-DPTF::UR_Sleeping vst))
        (p:string ".")
        
    )
    ;;Sleept 6500 VST to Emma
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 5000.0 432000)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 6000.0 518400)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 7000.0 604800)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 8000.0 691200)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 9000.0 777600)

    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 5000.0 5432000)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 6000.0 4518400)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 7000.0 3604800)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 8000.0 2691200)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 9000.0 1777600)

    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 5000.0 5432000)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 6000.0 4518400)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 7000.0 3604800)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 8000.0 2691200)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 9000.0 2777600)

    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 51000.0 432000)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 6000.0 1518400)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 7000.0 1604800)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 8000.0 2691200)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 9000.0 1777600)

    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 57000.0 432000)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 6000.0 1518400)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 7000.0 1604800)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 8000.0 2691200)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 9000.0 1777600)

    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 13000.0 432000)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 6000.0 1518400)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 7000.0 1604800)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 8000.0 2691200)
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 9000.0 1777600)

    ;;Show Emmas Balance
    
    (env-chain-data
        {"prev-block-hash": "98c486052a5147fdd30fa43cc6d67e0a4e680c856c37f9157cb788cd67d58006",
         "block-time": (time "2024-10-16T00:00:00Z")}
    )
    ;(ref-TS01-C2::VST|C_RepurposeSleeping patron s-vst 25 emma patron)
    [
        (format "<<<<<>>>>>{}" [p])
        (format "Emma has {} {} in total, owned nonces are {}"[(ref-DPMF::UR_AccountSupply s-vst emma) s-vst (ref-DPMF::UR_AccountNonces s-vst emma)])
        (format "<<<<<>>>>>{}" [p])
        (format "Emma VST supply is {}" [(ref-DPTF::UR_AccountSupply vst emma)])
        (format "Emma has on Nonce {} exactly {} units" [24 (ref-DPMF::UR_AccountNonceBalance s-vst 24 emma)])
        (format "<<<<<>>>>>{}" [p])
        (format "<<<<<>>>>>{}" [p])
        (format "AH has {} {} in total after repurpose, owned nonces are {}"[(ref-DPMF::UR_AccountSupply s-vst patron) s-vst (ref-DPMF::UR_AccountNonces s-vst patron)])
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 026 - Sleep & Repurpose Sleep ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 027 - Merge Repurpose Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
    )
    ;(ref-TS01-C2::VST|C_Merge KST.EMMA KST.EMMA "Z|VST-98c486052a51" (enumerate 1 30))
    ;(ref-TS01-C2::VST|C_MergeAll KST.EMMA KST.EMMA "Z|VST-98c486052a51")
    ;(ref-TS01-C2::VST|C_RepurposeMerge KST.EMMA "Z|VST-98c486052a51" (enumerate 1 10) KST.EMMA KST.ANHD)
    (ref-TS01-C2::VST|C_RepurposeMergeAll KST.EMMA "Z|VST-98c486052a51" KST.EMMA KST.ANHD)
    [
        (format "Emma has {} {} in total, owned nonces are {}"[(ref-DPMF::UR_AccountSupply "Z|VST-98c486052a51" KST.EMMA) "Z|VST-98c486052a51" (ref-DPMF::UR_AccountNonces "Z|VST-98c486052a51" KST.EMMA)])
        (format "Emma VST supply is {}" [(ref-DPTF::UR_AccountSupply "VST-98c486052a51" KST.EMMA)])
        (format "Ah has {} {} in total, owned nonces are {}"[(ref-DPMF::UR_AccountSupply "Z|VST-98c486052a51" KST.ANHD) "Z|VST-98c486052a51" (ref-DPMF::UR_AccountNonces "Z|VST-98c486052a51" KST.ANHD)])
        (format "Ah VST supply is {}" [(ref-DPTF::UR_AccountSupply "VST-98c486052a51" KST.ANHD)])
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 027 - Merge Repurpose Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 028 - Vesting Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ouro:string "OURO-98c486052a51")
        (v-ouro:string "V|OURO-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
    )
    ;(ref-TS01-C2::VST|C_Merge KST.EMMA KST.EMMA "Z|VST-98c486052a51" (enumerate 1 30))
    (ref-TS01-C2::VST|C_Vest patron patron emma ouro 250.0 3600 7200 20)
    [
        (format "Emma has {} {} in total, owned nonces are {}"[(ref-DPMF::UR_AccountSupply v-ouro emma) v-ouro (ref-DPMF::UR_AccountNonces v-ouro emma)])
        (format "Emma Vested-Ouro Unit is {}" [(ref-DPMF::UR_AccountUnit v-ouro emma)])
        (format "Emma OURO supply is {}" [(ref-DPTF::UR_AccountSupply ouro emma)])
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 028 - Vesting Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 029 - Unvesting Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-VST:module{VestingV4} VST)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ouro:string "OURO-98c486052a51")
        (v-ouro:string "V|OURO-98c486052a51")
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
    )
    (env-chain-data
        {"prev-block-hash": "98c486052a5147fdd30fa43cc6d67e0a4e680c856c37f9157cb788cd67d58006",
         "block-time": (time "2024-10-16T13:00:00Z")}
    )
    ;(ref-TS01-C2::VST|C_Unvest emma emma v-ouro 1)
    [
        ;(format "Account Nonce Balance is {}" [(ref-DPMF::UR_AccountNonceBalance v-ouro 1 emma)])
        ;(format "Culled Amount is {}" [(ref-VST::URC_CullMetaDataAmount emma v-ouro 1)])
        (format "Emma has {} {} in total, owned nonces are {}"[(ref-DPMF::UR_AccountSupply v-ouro emma) v-ouro (ref-DPMF::UR_AccountNonces v-ouro emma)])
        (format "Emma Vested-Ouro Unit is {}" [(ref-DPMF::UR_AccountUnit v-ouro emma)])
        (format "Emma OURO supply is {}" [(ref-DPTF::UR_AccountSupply ouro emma)])
        (format "Emma GAS supply is {}" [(ref-DPTF::UR_AccountSupply "GAS-98c486052a51" emma)])
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 029 - Unvesting Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 030 - Vested Ouro Tranasfer RoleTests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
    )
    (ref-TS01-C1::DPMF|C_DeployAccount KST.ANHD "V|OURO-98c486052a51" KST.ANHD)
    (ref-TS01-C1::DPMF|C_ToggleTransferRole KST.ANHD "V|OURO-98c486052a51" KST.ANHD true)
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 030 - Vested Ouro Tranasfer RoleTests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 031 - Further Vesting Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (dalos:string "Σ.W∇ЦwÏξБØnζΦψÕłěîбηжÛśTã∇țâĆã4ЬĚIŽȘØíÕlÛřбΩцμCšιÄиMkλ€УщшàфGřÞыÎäY8È₳BDÏÚmßOozBτòÊŸŹjПкцğ¥щóиś4h4ÑþююqςA9ÆúÛȚβжéÑψéУoЭπÄЩψďşõшżíZtZuψ4ѺËxЖψУÌбЧλüșěđΔjÈt0ΛŽZSÿΞЩŠ")
    )
    ;(ref-TS01-C1::DPMF|C_Transfer KST.EMMA "V|OURO-98c486052a51" 1 KST.EMMA KST.ANHD 100.0 false)
    ;(expect-failure "No Cull Possible" (ref-TS01-C2::VST|C_Unvest KST.EMMA KST.EMMA "V|OURO-98c486052a51" 2))
    (ref-TS01-C2::VST|C_Unvest KST.EMMA KST.EMMA "V|OURO-98c486052a51" 1)
    ;[
    ;    ;(format "Account Nonce Balance is {}" [(ref-DPMF::UR_AccountNonceBalance v-ouro 1 emma)])
    ;    ;(format "Culled Amount is {}" [(ref-VST::URC_CullMetaDataAmount emma v-ouro 1)])
    ;    (format "AH has {} {} in total, owned nonces are {}"[(ref-DPMF::UR_AccountSupply "V|OURO-98c486052a51" KST.ANHD) "V|OURO-98c486052a51" (ref-DPMF::UR_AccountNonces "V|OURO-98c486052a51" KST.ANHD)])
    ;    (format "AH Vested-Ouro Unit is {}" [(ref-DPMF::UR_AccountUnit "V|OURO-98c486052a51" KST.ANHD)])
    ;    (format "AH OURO supply is {}" [(ref-DPTF::UR_AccountSupply "OURO-98c486052a51" KST.ANHD)])
    ;]
    (ref-DALOS::CAP_EnforceAccountOwnership dalos)
    (ref-TS01-C2::ORBR|C_Sublimate patron emma 100.0)
    [
        (format "Emma GAS supply after unvest is {}" [(ref-DPTF::UR_AccountSupply "GAS-98c486052a51" KST.EMMA)])
        (format "Emma has Ignis Gas Discount {}" [(ref-DALOS::URC_IgnisGasDiscount KST.EMMA)])
        (format "OURO Owner is {}" [(ref-DPTF::UR_Konto "OURO-98c486052a51")])
        (format "Guard of OURO Owner is {}" [(ref-DALOS::UR_AccountGuard (ref-DPTF::UR_Konto "OURO-98c486052a51"))])
        (format "SOV-Guard of OURO Owner is {}" [(ref-DALOS::UR_AccountGuard (ref-DALOS::UR_AccountSovereign (ref-DPTF::UR_Konto "OURO-98c486052a51")))])
        (format "GOV-Guard of OURO Owner is {}" [(ref-DALOS::UR_AccountGovernor (ref-DPTF::UR_Konto "OURO-98c486052a51"))])
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 031 - Further Vesting Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 032 - Enable Frozen and Sleeping LP for Pool")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] } 
    ]
)

(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-VST:module{VestingV4} VST)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (ouro-id:string "OURO-98c486052a51")
        (pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        (lp-id "P|OURO-VST|LP-98c486052a51")
        (dptf:decimal (ref-DALOS::UR_UsagePrice "dptf"))
        (dpmf:decimal (ref-DALOS::UR_UsagePrice "dpmf"))
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                emma
                (fold (+) 0.0 [dptf dptf dpmf dpmf dpmf])
            )
        )
        (swp-sc:string (ref-DALOS::GOV|SWP|SC_NAME))
    )
    ;"k:ecaeae048b6e4b1d4cd9b5ba41041b39e05ac3a7b32f495a12823cb1c5ad0f48" emma
    ;"k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" ah
    (env-sigs
        [   
            { "key": "PK_Emma", "caps": [] }
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "ecaeae048b6e4b1d4cd9b5ba41041b39e05ac3a7b32f495a12823cb1c5ad0f48" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:ecaeae048b6e4b1d4cd9b5ba41041b39e05ac3a7b32f495a12823cb1c5ad0f48" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:ecaeae048b6e4b1d4cd9b5ba41041b39e05ac3a7b32f495a12823cb1c5ad0f48" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:ecaeae048b6e4b1d4cd9b5ba41041b39e05ac3a7b32f495a12823cb1c5ad0f48" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:ecaeae048b6e4b1d4cd9b5ba41041b39e05ac3a7b32f495a12823cb1c5ad0f48" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ]
            }
        ]
    )
    (ref-TS01-C2::VST|C_CreateSleepingLink emma ouro-id)
    (ref-TS01-C2::SWP|C_EnableFrozenLP emma pool)
    (ref-TS01-C2::SWP|C_EnableFrozenLP emma pool8)
    (ref-TS01-C2::SWP|C_EnableSleepingLP emma pool)
    (ref-TS01-C2::SWP|C_EnableSleepingLP emma pool8)
    (format "Emma GAS supply after unvest is {}" [(ref-DPTF::UR_AccountSupply "GAS-98c486052a51" KST.EMMA)])
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 032 - Enable Frozen and Sleeping LP for Pool ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 033 - Add Frozen & Sleeping Liquidity")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        
        ;
        ;(ref-VST:module{VestingV4} VST)
        ;(emma:string KST.EMMA)
        ;(pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        ;(lp-id "P|OURO-VST|LP-98c486052a51")
        (ref-U|SWP:module{UtilitySwpV2} U|SWP)
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-SWPL:module{SwapperLiquidity} SWPL)
        (ref-SWPI:module{SwapperIssueV2} SWPI)
        (ref-SWP:module{SwapperV4} SWP)
        (vst-sc:string (ref-DALOS::GOV|VST|SC_NAME))
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (f-vst:string "F|VST-98c486052a51")
        (s-vst:string "Z|VST-98c486052a51")
        (swp-sc:string (ref-DALOS::GOV|SWP|SC_NAME))
        (pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        (pool-lp:string (ref-SWP::UR_TokenLP pool))
        (f-lp:string (ref-DPTF::UR_Frozen pool-lp))
        (s-lp:string (ref-DPTF::UR_Sleeping pool-lp))
        ;;
        (dptf:string (ref-DPMF::UR_Sleeping s-vst))
        (ptp:integer (ref-SWP::UR_PoolTokenPosition pool dptf))
        (batch-amount:decimal (ref-DPMF::UR_AccountNonceBalance s-vst 31 patron))
        (lq-lst:[decimal] (ref-U|SWP::UC_MakeLiquidityList pool ptp batch-amount))
        (ld:object{SwapperLiquidity.LiquidityData}
            (ref-SWPL::URC_LD pool lq-lst)
        )
        (clad:object{SwapperLiquidity.CompleteLiquidityAdditionData}
            (ref-SWPL::URC|KDA-PID_CLAD vst-sc pool ld true true 1.0)
        )
        (pt-current-amounts:[decimal] (ref-SWP::UR_PoolTokenSupplies pool))
        (asmt2:object{SwapperLiquidity.AsymmetricTax}
            (ref-SWPL::URC_AsymmetricTax patron pool ld)
        )
        (shares:[decimal] 
            (ref-SWPI::UC_PoolShares [2500.0, 50000000.0] [1.0 1.0])
        )

        (nonce-md:[object] (ref-DPMF::UR_AccountNonceMetaData s-vst 31 patron))
    )
    ;(acquire-module-admin free.SWPL)
    
    (ref-TS01-C2::SWP|C_AddSleepingLiquidity patron patron pool s-vst 31)
    (ref-TS01-C2::SWP|C_AddFrozenLiquidity patron patron pool f-vst 50000.0)
    (ref-TS01-C2::SWP|C_ToggleFeeLock patron pool true)
    ;(ref-DPMF::UR_AccountNonceMetaData s-vst 31 patron)
    [
        (format "Nonce MD is {}" [(at "release-date" (at 0 nonce-md))])
    ]
    ;[
        ;true
        ;(format "LDDD IZZZZZZZZZZZ {}" [ld])
        ;(format "CLAD IZZZZZZZZZZZ {}" [clad])
        ;(format "Pool Token supplies are {}" [pt-current-amounts])
        ;(format "ASMT IZZZZ {}" [asmt])
        ;(format "Separator is {}" ["||||||||||||||||||||||||||||||||||||||||||||||||||||||"])
        ;(format "ASMT2 IZZZZ {}" [asmt2])
        ;(format "Separator is {}" ["||||||||||||||||||||||||||||||||||||||||||||||||||||||"])
        ;(format "Shares is {}" [shares])
        ;(format "AH has {} {} in total, owned nonces are {}"[(ref-DPMF::UR_AccountSupply s-vst patron) s-vst (ref-DPMF::UR_AccountNonces s-vst patron)])
        ;(format "Pool LP Capacity is {}" [(ref-SWP::URC_LpCapacity pool)])
        ;(format "Pool Token Supplies are {}" [(ref-SWP::UR_PoolTokenSupplies pool)])
        ;(format "AH has {} {}" [(ref-DPTF::UR_AccountSupply f-lp patron) f-lp])
        ;(format "AH has {} {}" [(ref-DPMF::UR_AccountSupply s-lp patron) s-lp])
    ;]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 033 - Add Frozen & Sleeping Liquidity ==> ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 034a - Add Iced Liquidity 0|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-CP:module{TalosStageOne_ClientPactsV3} TS01-CP)
        (patron:string KST.ANHD)
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        (ia:[decimal] [730.0 250.0 330.0 450.0 554.0 332.0 450.0])
        ;(liq-info:object{OuronetInfoV2.ClientInfo} 
        ;    (free.INFO-ONE.SWP|INFO_AddLiquidity
        ;        patron patron pool8 ia 1.0
        ;    )
        ;)
    )
    (ref-TS01-CP::SWP|C_AddIcedLiquidity
        patron
        patron
        pool8
        ia
    )
    ;(format "LQ INFO ICED LIQ IZ {}" [liq-info])
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 034a - Add Iced Liquidity 0|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 034b - Add Iced Liquidity 1|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 1 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 034b - Add Iced Liquidity 1|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;+++++++++++++
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 034c - Add Iced Liquidity 2|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 2 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 034c - Add Iced Liquidity 2|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 035a - Add Glacial Liquidity 0|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-CP:module{TalosStageOne_ClientPactsV3} TS01-CP)
        (patron:string KST.ANHD)
        (pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        (ia:[decimal] [730.0 250.0 330.0 450.0 554.0 332.0 450.0])
        (ias:[decimal] [200.0 1000.0])
        (ias2:[decimal] [0.0 1000.0])
        ;(liq-info:object{OuronetInfoV2.ClientInfo} 
        ;    (free.INFO-ONE.SWP|INFO_AddLiquidity
        ;        patron patron pool8 ia 1.0
        ;    )
        ;)
    )
    (ref-TS01-CP::SWP|C_AddGlacialLiquidity
        patron
        patron
        pool
        ias2
    )
    ;(format "LQ INFO GLACIAL LIQ IZ {}" [liq-info])
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 035a - Add Glacial Liquidity 0|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 035b - Add Glacial Liquidity 1|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 1 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 035b - Add Glacial Liquidity 1|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;+++++++++++++
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 035c - Add Glacial Liquidity 2|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 2 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 035c - Add Glacial Liquidity 2|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 036 - Making some Sleeping Tokens")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (vst:string "VST-98c486052a51")
        (ouro:string "OURO-98c486052a51")
        (s-vst:string "Z|VST-98c486052a51")
        (s-ouro:string "Z|OURO-98c486052a51")
    )
    (ref-TS01-C2::VST|C_Sleep patron patron emma vst 57000.0 432000)
    (ref-TS01-C2::VST|C_Sleep patron patron emma ouro 2500.0 432000)
    [
        (format "Emma has {} {} in total, owned nonces are {}" 
            [
                (ref-DPMF::UR_AccountSupply s-vst emma) 
                s-vst 
                (ref-DPMF::UR_AccountNonces s-vst emma)
            ]
        )
        (format "Emma has {} {} in total, owned nonces are {}" 
            [
                (ref-DPMF::UR_AccountSupply s-ouro emma) 
                s-ouro 
                (ref-DPMF::UR_AccountNonces s-ouro emma)
            ]
        )
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 036 - Making some Sleeping Tokens ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 036a - Add Sleeping Liquidity 0|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-CP:module{TalosStageOne_ClientPactsV3} TS01-CP)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (vst:string "VST-98c486052a51")
        (pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        (s-vst:string "Z|VST-98c486052a51")
        (s-ouro:string "Z|OURO-98c486052a51")
        ;(liq-info:object{OuronetInfoV2.ClientInfo} 
        ;    (free.INFO-ONE.SWP|INFO_AddLiquidity
        ;        patron patron pool8 ia 1.0
        ;    )
        ;)
        (sleeping-info:object{OuronetInfoV2.ClientInfo}
            (free.INFO-ONE.SWP|INFO_SleepingLiquidity
                patron emma pool8 s-ouro 1 1.0
            )
        )
    )    
    ;(ref-TS01-CP::SWP|C_AddSleepingLiquidity
    ;    patron
    ;    emma
    ;    poo8
    ;    s-vst
    ;    32
    ;)
    (ref-TS01-CP::SWP|C_AddSleepingLiquidity
        patron
        emma
        pool8
        s-ouro
        1
    )
    (format "LQ INFO SLEEPING LIQ IZ {}" [sleeping-info])
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 036a - Add Sleeping Liquidity 0|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 036b - Add Sleeping Liquidity 1|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(continue-pact 1 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 036b - Add Sleeping Liquidity 1|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;+++++++++++++
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 036c - Add Sleeping Liquidity 2|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(continue-pact 2 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 036c - Add Sleeping Liquidity 2|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 037a - Add Frozen Liquidity 0|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-CP:module{TalosStageOne_ClientPactsV3} TS01-CP)
        (patron:string KST.ANHD)
        (pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        (f-vst:string "F|VST-98c486052a51")
        ;(liq-info:object{OuronetInfoV2.ClientInfo} 
        ;    (free.INFO-ONE.SWP|INFO_AddLiquidity
        ;        patron patron pool8 ia 1.0
        ;    )
        ;)
        (frozen-info:object{OuronetInfoV2.ClientInfo}
            (free.INFO-ONE.SWP|INFO_FrozenLiquidity
                patron patron pool f-vst 50000.0 1.0
            )
        )
    )
    (ref-TS01-CP::SWP|C_AddFrozenLiquidity
        patron
        patron
        pool
        f-vst
        50000.0
    )
    (format "LQ INFO FROZEND LIQ IZ {}" [frozen-info])
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 037a - Add Frozen Liquidity 0|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 037b - Add Frozen Liquidity 1|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 1 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 037b - Add Frozen Liquidity 1|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;+++++++++++++
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 037c - Add Frozen Liquidity 2|2")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
    ]
)

(continue-pact 2 false "2n12TVKIdyigszwESxXUSOkAtK48XfsKcVoUGxWYSSE")


(print "")
(print "")
(format "<<<<<<<SWP|TX 037c - Add Frozen Liquidity 2|2 ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 038 - Add Iced Liquidity")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (patron:string KST.ANHD)
        (pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        ;
    )
    (ref-TS01-C2::SWP|C_AddIcedLiquidity patron patron pool [500.0 0.0])
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 038 - Add Iced Liquidity ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 039 - Add Glacial Liquidity")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)

(let
    (
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (patron:string KST.ANHD)
        (pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        (pool8:string "W|OURO-98c486052a51|TEUR-98c486052a51|EURT-98c486052a51|EURC-98c486052a51|EURD-98c486052a51|AEUR-98c486052a51|CEUR-98c486052a51")
        (ia:[decimal] [730.0 250.0 330.0 450.0 554.0 332.0 0.0])
        (ias:[decimal] [500.0 35000.0])
        ;
    )
    (ref-TS01-C2::SWP|C_AddGlacialLiquidity patron patron pool8 ia)
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 039 - Add Glacial Liquidity ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 040 - Management Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
    ]
)

(let
    (
        
        ;
        ;(ref-VST:module{VestingV4} VST)
        ;(emma:string KST.EMMA)
        ;(pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        ;(lp-id "P|OURO-VST|LP-98c486052a51")
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-SWP:module{SwapperV4} SWP)
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (f-vst:string "F|VST-98c486052a51")
        (s-vst:string "Z|VST-98c486052a51")
        (swp-sc:string (ref-DALOS::GOV|SWP|SC_NAME))
        (pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        (pool-lp:string (ref-SWP::UR_TokenLP pool))
        (f-lp:string (ref-DPTF::UR_Frozen pool-lp))
        (s-lp:string (ref-DPTF::UR_Sleeping pool-lp))

        (wp:string "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (wp-lp:string (ref-SWP::UR_TokenLP wp))

        (sp:string "S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51")

        (dlk:string "DLK-98c486052a51")
        (ouro:string "OURO-98c486052a51")
        (dwk:string "DWK-98c486052a51")
        (ignis:string "GAS-98c486052a51")

    )
    (ref-TS01-C2::SWP|C_ChangeOwnership patron pool emma)
    (ref-TS01-C2::SWP|C_ModifyCanChangeOwner patron pool false)
    (ref-TS01-C2::SWP|C_ModifyCanChangeOwner patron pool true)
    (ref-TS01-C2::SWP|C_ChangeOwnership patron pool patron)
    (ref-TS01-C2::SWP|C_ModifyWeights patron wp [0.25 0.25 0.50])
    (ref-TS01-C2::SWP|C_UpdateAmplifier patron sp 95.0)

    ;;
    (ref-TS01-C2::SWP|C_RemoveLiquidity patron patron wp 10000000.0)
    (ref-TS01-C2::SWP|C_AddLiquidity
        patron 
        patron
        wp
        [2000.0 2500.0 2000.0]
    )
    (ref-TS01-C2::ORBR|C_Compress patron 1000.0)
    [
        (format "AH has {} Ignis and {} OURO" [(ref-DPTF::UR_AccountSupply ignis patron) (ref-DPTF::UR_AccountSupply ouro patron )])
        (format "Pool {} owner is {}" [pool (ref-SWP::UR_OwnerKonto pool)])
        (format "Cand change owner for pool {} is {}" [pool (ref-SWP::UR_CanChangeOwner pool)])
        (format "Weigthed Pool weigths are {}" [(ref-SWP::UR_Weigths wp)])
        (format "Stable pool amplifier is {}" [(ref-SWP::UR_Amplifier sp)])
        (format "AH has {} {}" [(ref-DPTF::UR_AccountSupply wp-lp patron) wp-lp])
        (format "{} total supply is {}" [wp-lp (ref-DPTF::UR_Supply wp-lp)])
        (format "Pool {} suply of tokens is {}" [wp (ref-SWP::UR_PoolTokenSupplies wp)])

        (format "AH has {} {}, {} {}, and {} {}"
            [
                (ref-DPTF::UR_AccountSupply dlk patron)
                dlk
                (ref-DPTF::UR_AccountSupply ouro patron)
                ouro
                (ref-DPTF::UR_AccountSupply dwk patron)
                dwk
            ]
        )
    ]
    
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 040 - Management Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(begin-tx "SWP|TX 041 - Issue BVST")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
    ]
)
(let
    (
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (split-kda:[decimal] 
            (ref-DALOS::URC_SplitKDAPrices
                patron
                (ref-DALOS::UR_UsagePrice "dptf")
            )
        )
    )
    (env-sigs
        [   
            { "key": "PK_AncientHodler", "caps": [] }
            { "key": "6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" , 
              "caps": 
                [
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:50d6c59b21e5e6e55baecaa75a1007de37576bde12d8230dc82459cc01b9484b"
                        (at 2 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "k:0cb30c0121ff919266121a99ff9359871818932211df94dae4137c29bc0e8f7e"
                        (at 0 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:Y_iaJ6fE-ic7kwTtLfty66e3zyGGYIX7OdiMrIdkYBg"
                        (at 3 split-kda)
                    )
                    (coin.TRANSFER 
                        "k:6fa1d9c3e5078a54038159c9a6bd7182301e16d6f280615eddb18b8bd2d6c263" 
                        "c:HVNhO-WfROlC-guMUNk91MJWPzfSiP1O7Ip4T4g93O0"
                        (at 1 split-kda)
                    )
                ] 
            }
        ]
    )
    (let
        (
            (ids:list
                (ref-TS01-C1::DPTF|C_Issue
                    patron
                    patron
                    ["BlessedVesta"]
                    ["BVST"]
                    [24]
                    [true]
                    [true]
                    [true]
                    [true]
                    [true]
                    [true]
                )
            )
            (bvst-id:string (at 0 ids))
        )
        (print "")
        (print "")
        (format "<<<<<<<Issue Data is {} >>>>>>>" [bvst-id])
    )
)
(print "")
(print "")
(format "<<<<<<<SWP|TX 041 - Issue BVST ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 042 - BVST Fee Withdrawal Testing")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
    ]
)

(let
    (
        
        ;
        ;(ref-VST:module{VestingV4} VST)
        ;(emma:string KST.EMMA)
        ;(pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        ;(lp-id "P|OURO-VST|LP-98c486052a51")
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-A:module{TalosStageOne_AdminV4} TS01-A)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-SWPU:module{SwapperUsageV4} SWPU)
        (ref-SWP:module{SwapperV4} SWP)
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (lumy:string KST.LUMY)
        (coca:string KST.COCA)
        (kiss:string KST.KISS)
        (b-vst:string "BVST-98c486052a51")
        (orbr:string (ref-DALOS::GOV|OUROBOROS|SC_NAME))
        (gas-tanker:string (ref-DALOS::GOV|DALOS|SC_NAME))

    )
    ;(ref-TS01-A::DALOS|A_ToggleGAP true)
    (ref-TS01-C1::DPTF|C_SetFee patron b-vst 250.0)
    (ref-TS01-C1::DPTF|C_ToggleFee patron b-vst true)
    ;(ref-TS01-C1::DPTF|C_ToggleFeeLock patron b-vst true)
    (ref-TS01-C1::DPTF|C_Mint
        patron
        b-vst
        patron
        5000000.0
        true
    )
    (ref-TS01-C1::DPTF|C_Transfer 
        patron 
        b-vst
        patron
        emma
        1000000.0
        false
    )
    (ref-TS01-C1::DPTF|C_Transfer 
        patron 
        b-vst
        emma
        lumy
        400000.0
        false
    )
    (ref-TS01-C1::DPTF|C_DonateFees patron b-vst)
    (ref-TS01-C1::DPTF|C_Transfer 
        patron 
        b-vst
        emma
        lumy
        200000.0
        false
    )
    (ref-TS01-C1::DPTF|C_SetFeeTarget patron b-vst coca)
    (ref-TS01-C1::DPTF|C_Transfer 
        patron 
        b-vst
        emma
        lumy
        100000.0
        false
    )
    (ref-TS01-C2::ORBR|C_WithdrawFees patron b-vst kiss)
    [   
        (format "AH has {} {}" [(ref-DPTF::UR_AccountSupply b-vst patron) b-vst])
        (format "Emma has {} {}" [(ref-DPTF::UR_AccountSupply b-vst emma) b-vst])
        (format "Lumy has {} {}" [(ref-DPTF::UR_AccountSupply b-vst lumy) b-vst])
        (format "Coca has {} {}" [(ref-DPTF::UR_AccountSupply b-vst coca) b-vst])
        (format "Kiss has {} {}" [(ref-DPTF::UR_AccountSupply b-vst kiss) b-vst])
        (format "Gas Tanker has {} {}" [(ref-DPTF::UR_AccountSupply b-vst gas-tanker) b-vst])
        (format "Default Collector has {} {}" [(ref-DPTF::UR_AccountSupply b-vst orbr) b-vst])
    ]
    
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 042 - BVST Fee Withdrawal Testing ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 043 - Migration Test")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
    ]
)

(let
    (
        
        ;
        ;(ref-VST:module{VestingV4} VST)
        ;(emma:string KST.EMMA)
        ;(pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        ;(lp-id "P|OURO-VST|LP-98c486052a51")
        (ref-coin:module{fungible-v2} coin)
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-A:module{TalosStageOne_AdminV4} TS01-A)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-SWPU:module{SwapperUsageV4} SWPU)
        (ref-SWP:module{SwapperV4} SWP)
        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (lumy:string KST.LUMY)
        (coca:string KST.COCA)
        (kiss:string KST.KISS)
        (b-vst:string "BVST-98c486052a51")
        (orbr:string (ref-DALOS::GOV|OUROBOROS|SC_NAME))
        (gas-tanker:string (ref-DALOS::GOV|DALOS|SC_NAME))

        (migration-target:string "k:163320715f95957d1a15ea664fa6bd46f4c59dbb804f793ae93662a4c90b3189")
        (dwk:string "DWK-98c486052a51")
    )
    ;(ref-TS01-A::DALOS|A_ToggleGAP true)  
    [   
        (format "DWK Supply is {}" [(ref-DPTF::UR_Supply dwk)])
        ;(format "Migration will migrate {} KDA" [(ref-TS01-A::LIQUID|A_MigrateLiquidFunds migration-target)])
        ;(format "Migration address has {} KDA" [(ref-coin::get-balance migration-target)])
    ]
    
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 043 - Migration Test ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 044 - Treasury Dispo Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
        { "key": "PK_DHV", "caps": [] }
    ]
)

(let
    (

        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (ref-TS01-A:module{TalosStageOne_AdminV4} TS01-A)
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWPU:module{SwapperUsageV4} SWPU)
        (ref-SWPI:module{SwapperIssueV2} SWPI)
        (treasury:string (at 0 (ref-DALOS::UR_DemiurgoiID)))
        (ouro:string (ref-DALOS::UR_OuroborosID))

        ;(ref-VST:module{VestingV4} VST)
        (emma:string KST.EMMA)
        ;(pool:string "P|OURO-98c486052a51|VST-98c486052a51")
        ;(lp-id "P|OURO-VST|LP-98c486052a51")
        ;(ref-coin:module{fungible-v2} coin)
        
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        ;(ref-DPMF:module{DemiourgosPactMetaFungibleV5} DPMF)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        ;(ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        ;(ref-SWPU:module{SwapperUsageV4} SWPU)
        ;(ref-SWP:module{SwapperV4} SWP)
        ;(lumy:string KST.LUMY)
        ;(coca:string KST.COCA)
        ;(kiss:string KST.KISS)
        ;(b-vst:string "BVST-98c486052a51")
        ;(orbr:string (ref-DALOS::GOV|OUROBOROS|SC_NAME))
        ;(gas-tanker:string (ref-DALOS::GOV|DALOS|SC_NAME))
        ;(migration-target:string "k:163320715f95957d1a15ea664fa6bd46f4c59dbb804f793ae93662a4c90b3189")
        ;(dwk:string "DWK-98c486052a51")
    )
    (ref-TS01-C1::DPTF|C_Transfer patron ouro treasury emma 250000.0 false)
    (ref-TS01-A::DPTF|A_WipeTreasuryDebtPartial 100000.0)
    (ref-TS01-A::DPTF|A_WipeTreasuryDebt)
    (ref-TS01-A::DPTF|A_UpdateTreasuryDispoParameters 2 12.0 24.0)
    [   
        (format "Treasury OURO Supply is {}" [(ref-DPTF::UR_AccountSupply ouro treasury)])
        (format "Emma OURO Supply is {}" [(ref-DPTF::UR_AccountSupply ouro emma)])
        (format "Ouro Supply is {}" [(ref-DPTF::UR_Supply ouro)])
        (format "Minimum Treasury Dispo is {}" [(ref-DPTF::URC_TreasuryLowestDispo)])
        (format "Ouro is worth DWK {}" [(ref-SWPI::URC_WorthDWK ouro 1.0)])
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 044 - Treasury Dispo Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 045 - VSE and Swap Math Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_Lumy", "caps": [] }
        { "key": "PK_Nani", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
        { "key": "PK_DHV", "caps": [] }
    ]
)
(let
    (
        (ref-TS01-A:module{TalosStageOne_AdminV4} TS01-A)
    )
    (ref-TS01-A::SWP|A_UpdateLiquidBoost true)
)
(let
    (

        (patron:string KST.ANHD)
        (aoz:string KST.AOZT)
        (emma:string KST.EMMA)
        (nani:string KST.NANI)
        (ref-U|LST:module{StringProcessor} U|LST)
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-TS01-A:module{TalosStageOne_AdminV4} TS01-A)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWP:module{SwapperV4} SWP)
        (ref-SWPU:module{SwapperUsageV4} SWPU)
        (ref-SWPI:module{SwapperIssueV2} SWPI)
        (ref-SWPL:module{SwapperLiquidity} SWPL)
        (ref-U|SWP:module{UtilitySwpV2} U|SWP)
        ;;
        (pool:string "P|OURO-98c486052a51|BUSD-98c486052a51|TUSD-98c486052a51|VST-98c486052a51")
        (pool-s:string "S|PKOSON-98c486052a51|EKOSON-98c486052a51|AKOSON-98c486052a51")
        (ouro:string (ref-DALOS::UR_OuroborosID))
        (busd:string "BUSD-98c486052a51")
        (tusd:string "TUSD-98c486052a51")
        (vst:string "VST-98c486052a51")
        (k1:string "PKOSON-98c486052a51")
        (k2:string "EKOSON-98c486052a51")
        (k3:string "AKOSON-98c486052a51")
        ;;
        (as-lq:[decimal] [1800.0 6400.0 12000.0 164000.0])
        ;(as-lq2:[decimal] [1800.0 6400.0 2000.0 164000.0])
        ;;
        ;;
        ;;
        (input-amounts:[decimal] [50.0 5700.0 6600.0 0.0])
        ;;
        ;;
        (vse:object{UtilitySwpV2.VirtualSwapEngine}
            (ref-SWPL::UDC_VirtualSwapEngineSwpair
                patron
                [0.0 2800.0 4800.0 20000.0]
                pool
                [6800.0 13600.0 27200.0 544000.0]
            )
        )
        (vse1:object{UtilitySwpV2.VirtualSwapEngine}
            (ref-SWPI::UC_VirtualSwap vse
                {"input-ids"        : [busd tusd vst]
                ,"input-amounts"    : [2800.0 4800.0 20000.0]
                ,"output-id"        : ouro}
            )
        )
        (refill:[decimal] (ref-SWPI::URC_DirectRefillAmounts pool [busd tusd vst] [2800.0 4800.0 20000.0]))
        ;;Check D
        (l-test:[decimal] [500.0 1600.0 11700.0])
        (a:decimal 85.0)
        (sum:decimal (fold (+) 0.0 l-test))
        (product:decimal (fold (*) 1.0 l-test))
        (n:decimal (dec (length l-test)))
        (nn:decimal (^ n n))
        (np1:decimal (+ 1.0 n))
        (d-computed:decimal (ref-U|SWP::UC_ComputeD 85.0 l-test))
        ;;
        (v1:decimal (floor (+ (fold (*) 1.0 [a nn sum]) d-computed) 24))
        ;;
        (v2:decimal (floor (+ (fold (*) 1.0 [a d-computed nn]) (/ (^ d-computed np1) (* nn product))) 24))
        (ref-DPL|UR:module{DeployerReadsV4} DPL-UR)
    )
    ;(ref-TS01-A::SWP|A_UpdateLiquidBoost true)
    (ref-TS01-C1::DPTF|C_Transfer patron ouro patron nani 1600.0 false)
    (ref-TS01-C1::DPTF|C_Transfer patron busd patron nani 50000.0 false)
    (ref-TS01-C1::DPTF|C_Transfer patron tusd patron nani 50000.0 false)
    (ref-TS01-C1::DPTF|C_Transfer patron vst patron nani 500000.0 false)
    
    [
        [   
            ;(format "Pool Tokens are {}" [(ref-SWP::UR_PoolTokens pool-s)])
            (format "Pool Tokens Supplies are {}" [(ref-SWP::UR_PoolTokenSupplies pool)])
            
        ]
        [
            (format "LP Data is {}" [(ref-SWPL::URC_LD pool as-lq)])
        ]
        [
            ;(format "Virtual Swap Engine is {}" [vse])
            ;(format "Swapping Stable is {}" [(ref-SWPI::URC_Swap pool-s [k1] [7777.0] k2 false)])
            (format "Direct Stable Swap is {}" 
                [
                    (ref-U|SWP::UC_ComputeY
                        (ref-U|SWP::UDC_DirectRawSwapInput
                            85.0
                            [5000.0 7500.0 8500.0]
                            [2500.0]
                            [1]
                            2
                            24
                            [1.0 1.0 1.0]
                        )
                    )
                ]
            )
            (format "InverseDirect Stable Swap is {}" 
                [
                    (ref-U|SWP::UC_ComputeInverseY
                        (ref-U|SWP::UDC_InverseRawSwapInput
                            85.0
                            [5000.0 7500.0 8500.0]
                            2500.0
                            1
                            2
                            24
                            [1.0 1.0 1.0]
                        )
                    )
                ]
            )
            ;(format "Direct Swap for Pool Liq SINGLE 2800 Pos 2 to Pos 1 is {}"
            ;    [
            ;        (ref-U|SWP::UC_ComputeEP
            ;            (ref-U|SWP::UDC_DirectRawSwapInput
            ;                -1.0
            ;                [6800.0 13600.0 27200.0 544000.0]
            ;                [2800.0]
            ;                [1]
            ;                0
            ;                24
            ;                [1.0, 1.0, 1.0, 1.0]
            ;            )
            ;        )
            ;    ]
            ;)
            ;(format "Barebone Direct Swap with fees is MARK I {}"
            ;    [
            ;        (ref-SWPL::UC_BareboneSwapWithFeez
            ;            "Ѻ.éXødVțrřĄθ7ΛдUŒjeßćιiXTПЗÚĞqŸœÈэαLżØôćmч₱ęãΛě$êůáØCЗшõyĂźςÜãθΘзШË¥şEÈnxΞЗÚÏÛjDVЪжγÏŽнăъçùαìrпцДЖöŃȘâÿřh£1vĎO£κнβдłпČлÿáZiĐą8ÊHÂßĎЩmEBцÄĎвЙßÌ5Ï7ĘŘùrÑckeñëδšПχÌàî"
            ;            "P"
            ;            {"input-ids"        : ["BUSD-98c486052a51" "TUSD-98c486052a51" "VST-98c486052a51"]
            ;            ,"input-amounts"    : [2800.0 4800.0 20000.0]
            ;            ,"output-id"        : "OURO-98c486052a51"}
            ;            {"lp"               : 50.0
            ;            ,"special"          : 50.0
            ;            ,"boost"            : 50.0}
            ;            -1.0
            ;            [6800.0 13600.0 27200.0 544000.0]
            ;            [24 24 24 24]
            ;            [1 2 3]
            ;            0
            ;            [1.0 1.0 1.0 1.0]
            ;        )
            ;    ]
            ;)
            ;(format "Barebone Direct Swap with fees is MARK II {}"
            ;    [
            ;        (ref-SWPL::UC_BareboneSwapWithFeez
            ;            "Ѻ.éXødVțrřĄθ7ΛдUŒjeßćιiXTПЗÚĞqŸœÈэαLżØôćmч₱ęãΛě$êůáØCЗшõyĂźςÜãθΘзШË¥şEÈnxΞЗÚÏÛjDVЪжγÏŽнăъçùαìrпцДЖöŃȘâÿřh£1vĎO£κнβдłпČлÿáZiĐą8ÊHÂßĎЩmEBцÄĎвЙßÌ5Ï7ĘŘùrÑckeñëδšПχÌàî"
            ;            "P"
            ;            {"input-ids"        : ["BUSD-98c486052a51"]
            ;            ,"input-amounts"    : [2800.0]
            ;            ,"output-id"        : "OURO-98c486052a51"}
            ;            {"lp"               : 50.0
            ;            ,"special"          : 50.0
            ;            ,"boost"            : 50.0}
            ;            -1.0
            ;            [6800.0 13600.0 27200.0 544000.0]
            ;            [24 24 24 24]
            ;            [1]
            ;            0
            ;            [1.0 1.0 1.0 1.0]
            ;        )
            ;    ]
            ;)
            ;(format "Barebone Inverse Swap with Fees MARK III {}"
            ;    [
            ;        (ref-SWPL::UC_InverseBareboneSwapWithFeez
            ;            "Ѻ.éXødVțrřĄθ7ΛдUŒjeßćιiXTПЗÚĞqŸœÈэαLżØôćmч₱ęãΛě$êůáØCЗшõyĂźςÜãθΘзШË¥şEÈnxΞЗÚÏÛjDVЪжγÏŽнăъçùαìrпцДЖöŃȘâÿřh£1vĎO£κнβдłпČлÿáZiĐą8ÊHÂßĎЩmEBцÄĎвЙßÌ5Ï7ĘŘùrÑckeñëδšПχÌàî"
            ;            "P"
            ;            {"output-id"        : "OURO-98c486052a51"
            ;            ,"output-amount"    : 1073.535140697546215193129895
            ;            ,"input-id"         : "BUSD-98c486052a51"
            ;            }
            ;            {"lp"               : 50.0
            ;            ,"special"          : 50.0
            ;            ,"boost"            : 50.0}
            ;            -1.0
            ;            [6800.0 13600.0 27200.0 544000.0]
            ;            [24 24 24 24]
            ;            0
            ;            1
            ;            [1.0 1.0 1.0 1.0]
            ;        )
            ;    ]
            ;)
            ;(format "D is from 500x3 {}" [(ref-U|SWP::UC_ComputeD a [5000.0 7500.0 8500.0])])
            ;(format "D is from 500+540+460 {}" [(ref-U|SWP::UC_ComputeD a [5000.0 10000.0 6000.614252064804095329919485])])
            ;(format "V1 is {} and V2 is {}" [v1 v2])
        ]
        [
            ;(format "Virtual Swap Engine After Swap is {}" [vse1])
            ;(format "Refill is {}" [refill])
            ;(format "COMPUTATION FUNCTION IS {}"
            ;    [(ref-SWPL::URC_AsymmetricTax patron pool (ref-SWPL::URC_LD pool as-lq))]
            ;)
            ;(format "POOL SHAREZ IZ {}" [(ref-SWPI::UC_PoolShares as-lq [1.0 1.0 1.0 1.0])])
            ;(format "DEVIATION COMPUTATION IZ {}" 
            ;    [
            ;        (ref-SWPI::UC_DeviationInValueShares
            ;            [6800.0 13600.0 27200.0 544000.0]
            ;            [0.0 2800.0 4800.0 20000.0]
            ;            [1.0 1.0 1.0 1.0]
            ;        )
            ;    ]
            ;)
            (ref-DPL|UR::URC_0001_Header patron)
        ]
    ]
    
    ;(ref-TS01-C2::SWP|C_RemoveLiquidity patron patron pool 800000.0)
    ;(ref-TS01-C2::SWP|C_RemoveLiquidity patron patron pool 722962.962962964)
    
    
)


(print "")
(print "")
(format "<<<<<<<SWP|TX 045 - VSE and Swap Math Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 046 - Empy Emma of GAS")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
        { "key": "PK_DHV", "caps": [] }
    ]
)

(let
    (

        (patron:string KST.ANHD)
        (emma:string KST.EMMA)
        (ref-TS01-A:module{TalosStageOne_AdminV4} TS01-A)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DALOS:module{OuronetDalosV4} DALOS)
        (ref-SWPU:module{SwapperUsageV4} SWPU)
        (ref-SWPI:module{SwapperIssueV2} SWPI)
        (treasury:string (at 0 (ref-DALOS::UR_DemiurgoiID)))
        (ouro:string (ref-DALOS::UR_OuroborosID))
        (ignis:string (ref-DALOS::UR_IgnisID))
        
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)

        (emma-ignis:decimal (ref-DPTF::UR_AccountSupply ignis emma))
        (emma-ouro:decimal (ref-DPTF::UR_AccountSupply ouro emma))
    )
    (ref-TS01-C1::DPTF|C_Transfer patron ignis emma treasury emma-ignis true)
    (ref-TS01-C1::DPTF|C_Transfer patron ouro emma treasury emma-ouro true)
    [   
        (format "Emma has {} IGNIS" [(ref-DPTF::UR_AccountSupply ignis emma)])
        (format "Emma has {} OURO" [(ref-DPTF::UR_AccountSupply ouro emma)])
    ]
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 046 - Empy Emma of GAS ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 046 - Firestarter")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
        { "key": "PK_AOZ", "caps": [] }
        { "key": "PK_DHV", "caps": [] }
    ]
)
(let
    (
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (emma:string KST.EMMA)
    )
    (env-sigs
        [   
            ;{ "key": "PK_AncientHodler", "caps": [] }
            { "key": "PK_Ouroboros", "caps": [] }
            { "key": "PK_Emma", "caps": [] }
            { "key": "ecaeae048b6e4b1d4cd9b5ba41041b39e05ac3a7b32f495a12823cb1c5ad0f48", 
              "caps": [
                        (coin.TRANSFER
                        "k:ecaeae048b6e4b1d4cd9b5ba41041b39e05ac3a7b32f495a12823cb1c5ad0f48"
                        "c:fQ9KNZrn8rBUW7wWYoQ2SENoBiqDTCuH9mOd_6Ggdz4"
                        10.0)
                      ]
            }
        ]
    )
    ;(acquire-module-admin OUROBOROS)
    ;(with-capability (OUROBOROS.IGNIS|C>SUBLIMATE emma emma)
        ;(DALOS.DALOS|SetGovernor KST.ANHD)
        ;(DALOS.UR_AccountGovernor
        ;    "Σ.W∇ЦwÏξБØnζΦψÕłěîбηжÛśTã∇țâĆã4ЬĚIŽȘØíÕlÛřбΩцμCšιÄиMkλ€УщшàфGřÞыÎäY8È₳BDÏÚmßOozBτòÊŸŹjПкцğ¥щóиś4h4ÑþююqςA9ÆúÛȚβжéÑψéУoЭπÄЩψďşõшżíZtZuψ4ѺËxЖψУÌбЧλüșěđΔjÈt0ΛŽZSÿΞЩŠ"            
        ;)
    ;    (DALOS.CAP_EnforceAccountOwnership 
    ;        "Σ.W∇ЦwÏξБØnζΦψÕłěîбηжÛśTã∇țâĆã4ЬĚIŽȘØíÕlÛřбΩцμCšιÄиMkλ€УщшàфGřÞыÎäY8È₳BDÏÚmßOozBτòÊŸŹjПкцğ¥щóиś4h4ÑþююqςA9ÆúÛȚβжéÑψéУoЭπÄЩψďşõшżíZtZuψ4ѺËxЖψУÌбЧλüșěđΔjÈt0ΛŽZSÿΞЩŠ"
    ;    )
    ;)
    ;[
    ;    (DALOS.UR_AccountGovernor
    ;        "Σ.W∇ЦwÏξБØnζΦψÕłěîбηжÛśTã∇țâĆã4ЬĚIŽȘØíÕlÛřбΩцμCšιÄиMkλ€УщшàфGřÞыÎäY8È₳BDÏÚmßOozBτòÊŸŹjПкцğ¥щóиś4h4ÑþююqςA9ÆúÛȚβжéÑψéУoЭπÄЩψďşõшżíZtZuψ4ѺËxЖψУÌбЧλüșěđΔjÈt0ΛŽZSÿΞЩŠ"
    ;    )
    ;    (DALOS.UR_AccountGovernor
    ;        "Σ.şZïζhЛßdяźπПЧDΞZülΦпφßΣитœŸ4ó¥ĘкÌЦ₱₱AÚюłćβρèЬÍŠęgĎwтäъνFf9źdûъtJCλúp₿ÌнË₿₱éåÔŽvCOŠŃpÚKюρЙΣΩìsΞτWpÙŠŹЩпÅθÝØpтŮыØșþшу6GтÃêŮĞбžŠΠŞWĆLτЙđнòZЫÏJÿыжU6ŽкЫVσ€ьqθtÙѺSô€χ"
    ;    )
    ;    (DALOS.UR_AccountGovernor
    ;        "Σ.fĘĐżØиmΞüȚÓ0âGœȘйцań₿ѺĐЦãúα0šwř4QąйZЛgãŽ₿ßÇöđ2zFtмÄäþťûκpíČX₳ĂBÞãÅhλÚțqýвáêйâ₳ЫDżfÙŃλыêąйíâβPЫůjыáaπÕpnýOĄåęümÚJηğȘôρ8şnνEβęůйΛÑćλòxЧUdÑĎÈčVΞÌFAx£Ы2τżŻzДŽYуRČñÜ"
    ;    )
    ;]
    (ref-TS01-C2::SWP|C_Firestarter emma)
)

(print "")
(print "")
(format "<<<<<<<SWP|TX 046 - Firestarter ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 047 - DPL SWP Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_AncientHodler", "caps": [] }
        { "key": "PK_Emma", "caps": [] }
    ]
)
(let
    (
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPL|UR:module{DeployerReadsV4} DPL-UR)
        (pool:string "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (poolz:[string]
            [
                "S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51"
                "P|OURO-98c486052a51|PKOSON-98c486052a51"
            ]
        )
        (patron:string KST.ANHD)
        (dwk:string "DWK-98c486052a51")
        (dlk:string "DLK-98c486052a51")
        (ouro:string "OURO-98c486052a51")
        (emma:string KST.EMMA)
    )
    [
        ;(ref-DPL|UR::URC_0003_SWPairGeneralInfo)
        ;(ref-DPL|UR::URC_0004_SWPairDashboardInfo pool)
        ;(ref-DPL|UR::URC_0005_SWPairMultiDashboardInfo poolz)
        ;(ref-DPL|UR::URC_0006_Swap
        ;    patron
        ;    pool
        ;    [dlk ouro]
        ;    [10.0 20.0]
        ;    dwk
        ;)
        ;(ref-DPL|UR::URC_0007_InverseSwap
        ;    patron
        ;    pool
        ;    dwk
        ;    20.0
        ;    ouro
        ;)
        ;(ref-DPL|UR::URC_0010_SwpairInternalDashboard pool)
        ;(format "Capped Inverse for {} is {}" [dwk (ref-DPL|UR::URC_0008_CappedInverse pool dwk)])
        ;(format "Max Inverse for {} is {}" [dwk (ref-DPL|UR::URC_0009_MaxInverse pool dwk)])
        (ref-TS01-C1::DPTF|C_Transfer patron ouro patron emma 500.0 false)
        (ref-DPTF::UR_AccountSupply "OURO-98c486052a51" emma)
    ]
)

(print "")
(print "")
(format "<<<<<<<DPL SWP Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
;;
;;>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>>
;;
(print "=======================Swap Tests=================================")
(begin-tx "SWP|TX 047 - DPL SWP Tests")
(namespace "free")
(env-gasmodel "table")(env-gaslimit 10000000)(env-gas 0)
(env-sigs 
    [   
        { "key": "PK_Emma", "caps": [] }
    ]
)
(let
    (
        (ref-TS01-C1:module{TalosStageOne_ClientOneV4} TS01-C1)
        (ref-TS01-C2:module{TalosStageOne_ClientTwoV4} TS01-C2)
        (ref-DPTF:module{DemiourgosPactTrueFungibleV5} DPTF)
        (ref-DPL|UR:module{DeployerReadsV4} DPL-UR)
        (pool:string "W|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51")
        (poolz:[string]
            [
                "S|DLK-98c486052a51|OURO-98c486052a51|DWK-98c486052a51"
                "P|OURO-98c486052a51|PKOSON-98c486052a51"
            ]
        )
        (patron:string KST.ANHD)
        (dwk:string "DWK-98c486052a51")
        (dlk:string "DLK-98c486052a51")
        (ouro:string "OURO-98c486052a51")
        (emma:string KST.EMMA)
    )
    [
        ;;Make 50 OURO in IGNIS
        (ref-TS01-C2::ORBR|C_Sublimate emma emma 200.0)
        ;:Swap 50 OURO to DLK
        (ref-TS01-C2::SWP|C_SingleSwapWithSlippage
            emma
            emma
            pool
            "OURO-98c486052a51"
            20.0
            "DLK-98c486052a51"
            1.0
        )
        (ref-TS01-C2::SWP|C_AddLiquidity emma emma pool [0.0 50.0 0.0])
    ]
)

(print "")
(print "")
(format "<<<<<<<DPL SWP Tests ==> {} KDA GAS>>>>>>>" [(env-gas)])
(print "")
(print "")
(print "===^^^===")
(env-sigs [])
(commit-tx)
